{"version":3,"file":"react-native.js","sources":["../../../node_modules/tslib/tslib.es6.js","../src/utils/uri.ts","../src/utils/syncerror.ts","../src/utils/sanitize.ts","../src/utils/logger.ts","../src/configuration.ts","../src/subscriptions.ts","../src/services/network.ts","../src/services/storage.ts","../src/entity.ts","../src/mergingqueue.ts","../src/closeable.ts","../src/syncdocument.ts","../src/synclistitem.ts","../src/paginator.ts","../src/utils/tree.ts","../src/cache.ts","../src/synclist.ts","../src/syncmapitem.ts","../src/syncmap.ts","../src/streams/syncstream.ts","../src/clientInfo.ts","../src/entitiesCache.ts","../src/livequery.ts","../src/client.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","\n/**\n * Construct URI with query parameters\n */\nclass UriBuilder {\n  base: string;\n  args: string[];\n  paths: string[];\n\n  constructor(base: string) {\n    this.base = base;\n    this.args = new Array<string>();\n    this.paths = new Array<string>();\n  }\n\n  pathSegment(name: string): UriBuilder {\n    this.paths.push(encodeURIComponent(name));\n    return this;\n  }\n\n  queryParam(name: string, value: any): UriBuilder {\n    if (typeof value !== 'undefined') {\n      this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));\n    }\n    return this;\n  }\n\n  build(): string {\n    let result = this.base;\n    if (this.paths.length) {\n      result += '/' + this.paths.join('/');\n    }\n\n    if (this.args.length) {\n      result += '?' + this.args.join('&');\n    }\n\n    return result;\n  }\n}\n\nexport { UriBuilder };\n","/**\n * Generic SyncLibrary error class\n */\nclass SyncError extends Error {\n  name: string;\n  message: string;\n  status: number;\n  code: number;\n\n  constructor(message: string, status: number = 0, code: number = 0) {\n    super();\n\n    this.name = this.constructor.name;\n    this.message = `${message} (status: ${status}, code: ${code})`;\n    this.status = status;\n    this.code = code;\n  }\n}\n\nclass SyncNetworkError extends SyncError {\n  body: any;\n\n  constructor(message: string, status: number = 0, code: number = 0, body: any) {\n    super(message, status, code);\n    this.body = body;\n  }\n}\n\nexport { SyncError, SyncNetworkError };\nexport default SyncError;\n","import SyncError from './syncerror';\n\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @return {object}\n */\nfunction deepClone<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj)) as T;\n}\n\nfunction validatePageSize(pageSize: number) {\n  const validPageSize = pageSize === undefined || isPositiveInteger(pageSize);\n  if (!validPageSize) {\n    throw new SyncError(`Invalid pageSize parameter. Expected a positive integer, was '${pageSize}'.`, 400, 20007);\n  }\n}\n\nfunction validateMode(mode: string) {\n  if (!['open_or_create', 'open_existing', 'create_new'].includes(mode)) {\n    throw new Error(\"Invalid open mode. Expected one of { 'create_new', 'open_or_create', 'open_existing' }\");\n  }\n}\n\nfunction isInteger(number: any) {\n  return !isNaN(parseInt(number)) && isFinite(number);\n}\n\nfunction isPositiveInteger(number: any) {\n  return isInteger(number) && number > 0;\n}\n\nfunction isNonNegativeInteger(number: any) {\n  return isInteger(number) && number >= 0;\n}\n\nexport { deepClone, validatePageSize, validateMode, isPositiveInteger };\n","import * as loglevelLog from 'loglevel';\n\nconst log: loglevelLog.Logger = loglevelLog.getLogger('twilio-sync'); // twilio-sync is used by Flex SDK. Please DO NOT change\n\nfunction prepareLine(prefix, args) {\n  return [`${new Date().toISOString()} Sync ${prefix}:`].concat(Array.from(args));\n}\n\nexport default {\n  setLevel: function (level: any) {\n    log.setLevel(level);\n  },\n\n  trace: function (...args) {\n    log.trace.apply(null, prepareLine('T', args));\n  },\n  debug: function (...args) {\n    log.debug.apply(null, prepareLine('D', args));\n  },\n  info: function (...args) {\n    log.info.apply(null, prepareLine('I', args));\n  },\n  warn: function (...args) {\n    log.warn.apply(null, prepareLine('W', args));\n  },\n  error: function (...args) {\n    log.error.apply(null, prepareLine('E', args));\n  }\n};\n","const SUBSCRIPTIONS_PATH = '/v4/Subscriptions';\nconst MAPS_PATH = '/v3/Maps';\nconst LISTS_PATH = '/v3/Lists';\nconst DOCUMENTS_PATH = '/v3/Documents';\nconst STREAMS_PATH = '/v3/Streams';\nconst INSIGHTS_PATH = '/v3/Insights';\n\nfunction getWithDefault<T>(container: any, key: string, defaultValue: T): T {\n  if (container && typeof container[key] !== 'undefined') {\n    return container[key];\n  }\n  return defaultValue;\n}\n\n/**\n * Settings container for Sync library\n */\nclass Configuration {\n  private settings: any;\n\n  /**\n   * @param {Object} options\n   */\n  constructor(options: any = {}) {\n    const region = options.region || 'us1';\n    const defaultCdsUrl = `https://cds.${region}.twilio.com`;\n    const baseUri = options.cdsUri || defaultCdsUrl;\n    this.settings = {\n      subscriptionsUri: baseUri + SUBSCRIPTIONS_PATH,\n      documentsUri: baseUri + DOCUMENTS_PATH,\n      listsUri: baseUri + LISTS_PATH,\n      mapsUri: baseUri + MAPS_PATH,\n      streamsUri: baseUri + STREAMS_PATH,\n      insightsUri: baseUri + INSIGHTS_PATH,\n      sessionStorageEnabled: getWithDefault(options.Sync, 'enableSessionStorage', true),\n      productId: options.productId,\n    };\n  }\n\n  get subscriptionsUri(): string {\n    return this.settings.subscriptionsUri;\n  }\n\n  get documentsUri(): string {\n    return this.settings.documentsUri;\n  }\n\n  get listsUri(): string {\n    return this.settings.listsUri;\n  }\n\n  get mapsUri(): string {\n    return this.settings.mapsUri;\n  }\n\n  get streamsUri(): string {\n    return this.settings.streamsUri;\n  }\n\n  get insightsUri(): string {\n    return this.settings.insightsUri;\n  }\n\n  get backoffConfig(): any {\n    return this.settings.backoffConfig || {};\n  }\n\n  get sessionStorageEnabled(): boolean {\n    return this.settings.sessionStorageEnabled;\n  }\n\n  get productId(): string {\n    return this.settings.productId;\n  }\n}\n\nexport { Configuration };\n","import { Backoff } from '@twilio/operation-retrier';\nimport { SyncError } from './utils/syncerror';\nimport log from './utils/logger';\n\nimport { SyncEntity } from './entity';\nimport { Configuration, Network } from './interfaces/services';\n\nimport { TransportUnavailableError } from 'twilsock';\n\n/**\n * A data container used by the Subscriptions class to track subscribed entities' local\n * representations and their state.\n */\nclass SubscribedEntity {\n  private readonly localObject: SyncEntity;\n  pendingCorrelationId: number;\n  pendingAction: string;\n  rejectedWithError: any;\n  retryCount: number;\n\n  private established: boolean;\n\n  constructor(entity: SyncEntity) {\n    this.localObject = entity;\n    this.pendingCorrelationId = null;\n    this.pendingAction = null;\n    this.established = false;\n    this.retryCount = 0;\n  }\n\n  get sid(): string {\n    return this.localObject.sid;\n  }\n\n  get type(): string {\n    return this.localObject.type;\n  }\n\n  get lastEventId(): number {\n    return this.localObject.lastEventId;\n  }\n\n  // below properties are specific to Insights only\n  get indexName(): string {\n    return this.localObject.indexName;\n  }\n\n  get queryString(): string {\n    return this.localObject.queryString;\n  }\n\n  get isEstablished(): boolean {\n    return this.established;\n  }\n\n  update(event, isStrictlyOrdered) {\n    this.localObject._update(event, isStrictlyOrdered);\n  }\n\n  updatePending(action: Action, correlationId: number) {\n    this.pendingAction = action;\n    this.pendingCorrelationId = correlationId;\n  }\n\n  reset() {\n    this.updatePending(null, null);\n    this.retryCount = 0;\n    this.established = false;\n    this.setSubscriptionState('none');\n  }\n\n  markAsFailed(message) {\n    this.rejectedWithError = message.error;\n    this.updatePending(null, null);\n    this.localObject.reportFailure(\n      new SyncError(`Failed to subscribe on service events: ${message.error.message}`, message.error.status, message.error.code));\n  }\n\n  complete(eventId: number): void {\n    this.updatePending(null, null);\n    this.established = true;\n    this.localObject._advanceLastEventId(eventId);\n  }\n\n  setSubscriptionState(newState) {\n    this.localObject._setSubscriptionState(newState);\n  }\n}\n\ninterface SubscriptionsServices {\n  config: Configuration;\n  network: Network;\n}\n\ntype Action = 'establish' | 'cancel' | null;\n\ninterface PokeBatch {\n  action: Action;\n  subscriptions: SubscribedEntity[];\n}\n\ntype PokeReason = 'ttl' | 'reconnect';\n\n/**\n * @class Subscriptions\n * @classdesc A manager which, in batches of varying size, continuously persists the\n *      subscription intent of the caller to the Sync backend until it achieves a\n *      converged state.\n */\nclass Subscriptions {\n  private services: SubscriptionsServices;\n\n  // This is always the full set of subscribables (SubscribedEntity instances) intended by\n  // the client. At any point, whatever the state of these subscriptions on the server, this\n  // is the intent of the user to which the SDK must converge.\n  private subscriptions: Map<string, SubscribedEntity>;\n\n  // This includes the set of subscribables (SubscribedEntity instances) for whom a request\n  // has been dispatched (whether or not this particular request ultimately succeeds) to\n  // establish a live subscription. Entities are removed when the corresponding \"cancel\"\n  // request is dispatched.\n  private persisted: Map<string, SubscribedEntity>;\n\n  private latestPokeResponseArrivalTimestampByCorrelationId: Map<number, number>;\n\n  private backoff: Backoff;\n\n  private isConnected: boolean = false;\n\n  private maxBatchSize: number = 100;\n\n  // If the server includes a `ttl_in_s` attribute in the poke response, subscriptionTtlTimer is started for that duration\n  // such that when it fires, it repokes the entire sync set (i.e., emulates a reconnect). Every reconnect resets the timer.\n  // After the timer has fired, the first poke request includes a `reason: ttl` attribute in the body.\n  private subscriptionTtlTimer: any | null = null;\n  private pendingPokeReason: PokeReason = null;\n\n  /**\n   * @constructor\n   * Prepares a new Subscriptions manager object with zero subscribed or persisted subscriptions.\n   *\n   * @param {object} config may include a key 'backoffConfig', wherein any of the parameters\n   *      of Backoff.exponential (from npm 'backoff') are valid and will override the defaults.\n   *\n   * @param {Network} must be a viable running Sync Network object, useful for routing requests.\n   */\n  constructor(services: SubscriptionsServices) {\n    this.services = services;\n    this.subscriptions = new Map<string, SubscribedEntity>();\n    this.persisted = new Map<string, SubscribedEntity>();\n    this.latestPokeResponseArrivalTimestampByCorrelationId = new Map<number, number>();\n\n    const defaultBackoffConfig = {\n      randomisationFactor: 0.2,\n      initialDelay: 100,\n      maxDelay: 2 * 60 * 1000\n    };\n    this.backoff = Backoff.exponential(Object.assign(defaultBackoffConfig, this.services.config.backoffConfig));\n\n    // This block is triggered by #_persist. Every request is executed in a series of (ideally 1)\n    // backoff 'ready' event, at which point a new subscription set is calculated.\n    this.backoff.on('ready', () => {\n      let {action: action, subscriptions: subscriptionRequests} = this.getSubscriptionUpdateBatch();\n      if (action) {\n        this.applyNewSubscriptionUpdateBatch(action, subscriptionRequests);\n      } else {\n        this.backoff.reset();\n        log.debug('All subscriptions resolved.');\n      }\n    });\n  }\n\n  private getSubscriptionUpdateBatch(): PokeBatch {\n    function subtract(these: Map<string, SubscribedEntity>, those: Map<string, SubscribedEntity>, action: Action, limit) {\n      let result = [];\n      for (let [thisKey, thisValue] of these) {\n        const otherValue = those.get(thisKey);\n        if (!otherValue && action !== thisValue.pendingAction && !thisValue.rejectedWithError) {\n          result.push(thisValue);\n          if (limit && result.length >= limit) {\n            break;\n          }\n        }\n      }\n      return result;\n    }\n\n    let listToAdd = subtract(this.subscriptions, this.persisted, 'establish', this.maxBatchSize);\n    if (listToAdd.length > 0) {\n      return {action: 'establish', subscriptions: listToAdd};\n    }\n\n    let listToRemove = subtract(this.persisted, this.subscriptions, 'cancel', this.maxBatchSize);\n    if (listToRemove.length > 0) {\n      return {action: 'cancel', subscriptions: listToRemove};\n    }\n\n    return {action: null, subscriptions: null};\n  }\n\n  private persist() {\n    this.backoff.backoff();\n  }\n\n  private async applyNewSubscriptionUpdateBatch(action, requests: SubscribedEntity[]) {\n    if (!this.isConnected) {\n      log.debug(`Twilsock connection (required for subscription) not ready; waiting…`);\n      this.backoff.reset();\n      return;\n    }\n\n    // Keeping in mind that events may begin flowing _before_ we receive the response\n    requests = this.processLocalActions(action, requests);\n\n    const correlationId = new Date().getTime();\n    for (const subscribed of requests) {\n      this.recordActionAttemptOn(subscribed, action, correlationId);\n    }\n\n    let reason: PokeReason = this.pendingPokeReason;\n    this.pendingPokeReason = null;\n\n    // Send this batch to the service\n    try {\n      let response = await this.request(action, correlationId, reason, requests);\n\n      let newMaxBatchSize = response.body.max_batch_size;\n      if (!isNaN(parseInt(newMaxBatchSize)) && isFinite(newMaxBatchSize) && newMaxBatchSize > 0) {\n        this.maxBatchSize = newMaxBatchSize;\n      }\n\n      if (!this.subscriptionTtlTimer) {\n        let subscriptionTtlInS = response.body.ttl_in_s;\n        let isNumeric = !isNaN(parseFloat(subscriptionTtlInS)) && isFinite(subscriptionTtlInS);\n        let isValidTtl = isNumeric && subscriptionTtlInS > 0;\n        if (isValidTtl) {\n          this.subscriptionTtlTimer = setTimeout(() => this.onSubscriptionTtlElapsed(), subscriptionTtlInS * 1000);\n        }\n      }\n\n      if (action === 'establish') {\n        const estimatedDeliveryInMs = response.body.estimated_delivery_in_ms;\n        let isNumeric = !isNaN(parseFloat(estimatedDeliveryInMs)) && isFinite(estimatedDeliveryInMs);\n        let isValidTimeout = isNumeric && estimatedDeliveryInMs > 0;\n        if (isValidTimeout) {\n          setTimeout(() => this.verifyPokeDelivery(correlationId, estimatedDeliveryInMs, requests), estimatedDeliveryInMs);\n        } else {\n          log.error(`Invalid timeout: ${estimatedDeliveryInMs}`);\n        }\n        requests.filter(r => r.pendingCorrelationId === correlationId)\n          .forEach(r => r.setSubscriptionState('response_in_flight'));\n      }\n      this.backoff.reset();\n    } catch (e) {\n      for (const attemptedSubscription of requests) {\n        this.recordActionFailureOn(attemptedSubscription, action);\n      }\n\n      if (e instanceof TransportUnavailableError) {\n        log.debug(`Twilsock connection (required for subscription) not ready (c:${correlationId}); waiting…`);\n        this.backoff.reset();\n      } else {\n        log.debug(`Failed an attempt to ${action} subscriptions (c:${correlationId}); retrying`, e);\n        this.persist();\n      }\n    }\n  }\n\n  private verifyPokeDelivery(correlationId: number, estimatedDeliveryInMs: number, requests: SubscribedEntity[]) {\n    const lastReceived = this.latestPokeResponseArrivalTimestampByCorrelationId.get(correlationId);\n    const silencePeriod = lastReceived ? (new Date().getTime() - lastReceived)\n      : estimatedDeliveryInMs;\n    if (silencePeriod >= estimatedDeliveryInMs) {\n      // If we haven't received _any_ responses from that poke request for the duration of estimated_delivery_in_ms, poke again\n      requests\n        .filter(r => r.pendingCorrelationId === correlationId)\n        .forEach(r => {\n          r.updatePending(null, null);\n          r.retryCount++;\n          this.persisted.delete(r.sid);\n        });\n      this.persist();\n      this.latestPokeResponseArrivalTimestampByCorrelationId.delete(correlationId);\n    } else {\n      // Otherwise, the poke responses are probably in transit and we should wait for them\n      const timeoutExtension = estimatedDeliveryInMs - silencePeriod;\n      setTimeout(() => this.verifyPokeDelivery(correlationId, estimatedDeliveryInMs, requests), timeoutExtension);\n    }\n  }\n\n  private processLocalActions(action, requests) {\n    if (action === 'cancel') {\n      return requests.filter(request => !request.rejectedWithError);\n    }\n    return requests;\n  }\n\n  private recordActionAttemptOn(attemptedSubscription: SubscribedEntity, action, correlationId) {\n    attemptedSubscription.setSubscriptionState('request_in_flight');\n    if (action === 'establish') {\n      this.persisted.set(attemptedSubscription.sid, attemptedSubscription);\n      attemptedSubscription.updatePending(action, correlationId);\n    } else { // cancel\n      let persistedSubscription = this.persisted.get(attemptedSubscription.sid);\n      if (persistedSubscription) {\n        persistedSubscription.updatePending(action, correlationId);\n      }\n    }\n  }\n\n  private recordActionFailureOn(attemptedSubscription: SubscribedEntity, action) {\n    attemptedSubscription.setSubscriptionState('none');\n    attemptedSubscription.updatePending(null, null);\n    if (action === 'establish') {\n      this.persisted.delete(attemptedSubscription.sid);\n    }\n  }\n\n  private request(action, correlationId, reason: PokeReason, objects: SubscribedEntity[]) {\n    let requests = objects.map(object => ({\n        object_sid: object.sid,\n        object_type: object.type,\n        last_event_id: action === 'establish' ? object.lastEventId : undefined,\n        index_name: action === 'establish' ? object.indexName : undefined,\n        query_string: action === 'establish' ? object.queryString : undefined,\n      })\n    );\n    let retriedRequests = objects.filter(a => a.retryCount > 0).length;\n\n    log.debug(`Attempting '${action}' request (c:${correlationId}):`, requests);\n    const requestBody: any = {\n      event_protocol_version: 3,\n      action,\n      correlation_id: correlationId,\n      retried_requests: retriedRequests,\n      ttl_in_s: -1,\n      requests\n    };\n    if (reason === 'ttl') {\n      requestBody.reason = reason;\n    }\n\n    return this.services.network.post(this.services.config.subscriptionsUri, requestBody);\n  }\n\n  /**\n   * Establishes intent to be subscribed to this entity. That subscription will be effected\n   * asynchronously.\n   * If subscription to the given sid already exists, it will be overwritten.\n   *\n   * @param {String} sid should be a well-formed SID, uniquely identifying a single instance of a Sync entity.\n   * @param {Object} entity should represent the (singular) local representation of this entity.\n   *      Incoming events and modifications to the entity will be directed at the _update() function\n   *      of this provided reference.\n   *\n   * @return undefined\n   */\n  add(sid: string, entity: SyncEntity): void {\n    log.debug(`Establishing intent to subscribe to ${sid}`);\n    const existingSubscription = this.subscriptions.get(sid);\n    if (existingSubscription && entity && existingSubscription.lastEventId === entity.lastEventId) {\n      // If last event id is the same as before - we're fine\n      return;\n    }\n\n    this.persisted.delete(sid);\n    this.subscriptions.set(sid, new SubscribedEntity(entity));\n    this.persist();\n  }\n\n  /**\n   * Establishes the caller's intent to no longer be subscribed to this entity. Following this\n   * call, no further events shall be routed to the local representation of the entity, even\n   * though a server-side subscription may take more time to actually terminate.\n   *\n   * @param {string} sid should be any well-formed SID, uniquely identifying a Sync entity.\n   *      This call only has meaningful effect if that entity is subscribed at the\n   *      time of call. Otherwise does nothing.\n   *\n   * @return undefined\n   */\n  remove(sid: string): void {\n    log.debug(`Establishing intent to unsubscribe from ${sid}`);\n    const removed = this.subscriptions.delete(sid);\n    if (removed) {\n      this.persist();\n    }\n  }\n\n  /**\n   * The point of ingestion for remote incoming messages (e.g. new data was written to a map\n   * to which we are subscribed).\n   *\n   * @param {object} message is the full, unaltered body of the incoming notification.\n   *\n   * @return undefined\n   */\n  acceptMessage(message: any, isStrictlyOrdered: boolean): void {\n    log.trace('Subscriptions received', message);\n    if (message.correlation_id) {\n      this.latestPokeResponseArrivalTimestampByCorrelationId.set(message.correlation_id, new Date().getTime());\n    }\n\n    let event_type;\n    switch (message.event_type) {\n      case 'subscription_established':\n        this.applySubscriptionEstablishedMessage(message.event, message.correlation_id);\n        break;\n      case 'subscription_canceled':\n        this.applySubscriptionCancelledMessage(message.event, message.correlation_id);\n        break;\n      case 'subscription_failed':\n        this.applySubscriptionFailedMessage(message.event, message.correlation_id);\n        break;\n      case (event_type = message.event_type.match(/^(?:map|list|document|stream|live_query)_/) || {}).input: {\n        let typedSid;\n        switch (event_type[0]) {\n          case 'map_':\n            typedSid = message.event.map_sid;\n            break;\n          case 'list_':\n            typedSid = message.event.list_sid;\n            break;\n          case 'document_':\n            typedSid = message.event.document_sid;\n            break;\n          case 'stream_':\n            typedSid = message.event.stream_sid;\n            break;\n          case 'live_query_':\n            typedSid = message.event.query_id;\n            // hack to mark replay events for LiveQuery as strictly ordered, due to lack of special type of notification for them\n            // (normally only replay events would have `twilio.sync.event` type, but LiveQuery non-replay events were also assigned\n            // to this type in legacy clients, which we have to support now; hence a hack)\n            isStrictlyOrdered = false; // explicitly override it due to code in router.ts does not know about LiveQueries\n            if (message.strictly_ordered === true) {\n              isStrictlyOrdered = true;\n            }\n            break;\n          default:\n            typedSid = undefined;\n        }\n\n        this.applyEventToSubscribedEntity(typedSid, message, isStrictlyOrdered);\n        }\n        break;\n      default:\n        log.debug(`Dropping unknown message type ${message.event_type}`);\n        break;\n    }\n  }\n\n  private applySubscriptionEstablishedMessage(message, correlationId) {\n    const sid = message.object_sid;\n    let subscriptionIntent = this.persisted.get(message.object_sid);\n    if (subscriptionIntent && subscriptionIntent.pendingCorrelationId === correlationId) {\n      if (message.replay_status === 'interrupted') {\n        log.debug(`Event Replay for subscription to ${sid} (c:${correlationId}) interrupted; continuing eagerly.`);\n        subscriptionIntent.updatePending(null, null);\n        this.persisted.delete(subscriptionIntent.sid);\n        this.backoff.reset();\n      } else if (message.replay_status === 'completed') {\n        log.debug(`Event Replay for subscription to ${sid} (c:${correlationId}) completed. Subscription is ready.`);\n        subscriptionIntent.complete(message.last_event_id);\n        this.persisted.set(message.object_sid, subscriptionIntent);\n        subscriptionIntent.setSubscriptionState('established');\n        this.backoff.reset();\n      }\n    } else {\n      log.debug(`Late message for ${message.object_sid} (c:${correlationId}) dropped.`);\n    }\n    this.persist();\n  }\n\n  private applySubscriptionCancelledMessage(message, correlationId) {\n    let persistedSubscription = this.persisted.get(message.object_sid);\n    if (persistedSubscription && persistedSubscription.pendingCorrelationId === correlationId) {\n      persistedSubscription.updatePending(null, null);\n      persistedSubscription.setSubscriptionState('none');\n      this.persisted.delete(message.object_sid);\n    } else {\n      log.debug(`Late message for ${message.object_sid} (c:${correlationId}) dropped.`);\n    }\n    this.persist();\n  }\n\n  private applySubscriptionFailedMessage(message, correlationId) {\n    const sid = message.object_sid;\n    let subscriptionIntent = this.subscriptions.get(sid);\n    let subscription = this.persisted.get(sid);\n    if (subscriptionIntent && subscription) {\n      if (subscription.pendingCorrelationId === correlationId) {\n        log.error(`Failed to subscribe on ${subscription.sid}`, message.error);\n        subscription.markAsFailed(message);\n        subscription.setSubscriptionState('none');\n      }\n    } else if (!subscriptionIntent && subscription) {\n      this.persisted.delete(sid);\n      subscription.setSubscriptionState('none');\n    }\n\n    this.persist();\n  }\n\n  private applyEventToSubscribedEntity(sid: string, message: any, isStrictlyOrdered: boolean): void {\n    if (!sid) {\n      return;\n    }\n\n    // Looking for subscription descriptor to check if poke has been completed\n    isStrictlyOrdered = isStrictlyOrdered || (() => {\n      let subscription = this.persisted.get(sid);\n      return subscription && subscription.isEstablished;\n    })();\n\n    // Still searching for subscriptionIntents. User could remove subscription already\n    let subscriptionIntent = this.subscriptions.get(sid);\n    if (subscriptionIntent) {\n      message.event.type = message.event_type;\n      subscriptionIntent.update(message.event, isStrictlyOrdered);\n    } else {\n      log.debug(`Message dropped for SID '${sid}', for which there is no subscription.`);\n    }\n  }\n\n  onConnectionStateChanged(isConnected: boolean) {\n    this.isConnected = isConnected;\n    if (isConnected) {\n      this.poke('reconnect');\n    }\n  }\n\n  private onSubscriptionTtlElapsed() {\n    if (this.isConnected) {\n      this.poke('ttl');\n    }\n  }\n\n  /**\n   * Prompts a playback of any missed changes made to any subscribed object. This method\n   * should be invoked whenever the connectivity layer has experienced cross-cutting\n   * delivery failures that would affect the entire local sync set. Any tangible result\n   * of this operation will result in calls to the _update() function of subscribed\n   * Sync entities.\n   */\n  private poke(reason: PokeReason) {\n    log.debug(`Triggering event replay for all subscriptions, reason=${reason}`);\n    this.pendingPokeReason = reason;\n    if (this.subscriptionTtlTimer) {\n      clearTimeout(this.subscriptionTtlTimer);\n      this.subscriptionTtlTimer = null;\n    }\n\n    let failedSubscriptions = [];\n\n    for (let it of this.persisted.values()) {\n      it.reset();\n      if (it.rejectedWithError) {\n        failedSubscriptions.push(it);\n      }\n    }\n\n    this.persisted.clear();\n    for (let it of failedSubscriptions) {\n      this.persisted.set(it.sid, it);\n    }\n    this.persist();\n  }\n\n  /**\n   * Stops all communication, clears any subscription intent, and returns.\n   */\n  shutdown() {\n    this.backoff.reset();\n    this.subscriptions.clear();\n  }\n}\n\nexport { SubscriptionsServices, Subscriptions };\n","import * as uuid from 'uuid';\n\nimport { SyncError, SyncNetworkError } from '../utils/syncerror';\nimport log from '../utils/logger';\n\nimport { ClientInfo } from '../clientInfo';\nimport { Retrier } from '@twilio/operation-retrier';\nimport { Network } from '../interfaces/services';\n\nimport { TransportUnavailableError } from 'twilsock';\n\nconst MINIMUM_RETRY_DELAY = 4000;\nconst MAXIMUM_RETRY_DELAY = 60000;\nconst MAXIMUM_ATTEMPTS_TIME = 90000;\nconst RETRY_DELAY_RANDOMNESS = 0.2;\n\nfunction messageFromErrorBody(transportError: any): string {\n  if (transportError.body) {\n    if (transportError.body.message) {\n      return transportError.body.message;\n    }\n  }\n  switch (transportError.status) {\n    case 429:\n      return 'Throttled by server';\n    case 404:\n      return 'Not found from server';\n    default:\n      return 'Error from server';\n  }\n}\n\nfunction codeFromErrorBody(trasportError: any): number {\n  if (trasportError.body) {\n    return trasportError.body.code;\n  }\n  return 0;\n}\n\nfunction mapTransportError(transportError: any): Error {\n  if (transportError.status === 409) {\n    return new SyncNetworkError(messageFromErrorBody(transportError),\n      transportError.status,\n      codeFromErrorBody(transportError),\n      transportError.body);\n  } else if (transportError.status) {\n    return new SyncError(messageFromErrorBody(transportError),\n      transportError.status,\n      codeFromErrorBody(transportError));\n  } else if (transportError instanceof TransportUnavailableError) {\n    return transportError;\n  } else {\n    return new SyncError(transportError.message, 0, 0);\n  }\n}\n\n/**\n * @classdesc Incapsulates network operations to make it possible to add some optimization/caching strategies\n */\nclass NetworkService implements Network {\n  clientInfo: ClientInfo;\n  config: any;\n  transport: any;\n\n  constructor(clientInfo: ClientInfo, config: any, transport: any) {\n    this.clientInfo = clientInfo;\n    this.config = config;\n    this.transport = transport;\n  }\n\n  private createHeaders() {\n    return {\n      'Content-Type': 'application/json',\n      'Twilio-Sync-Client-Info': JSON.stringify(this.clientInfo),\n      'Twilio-Request-Id': 'RQ' + uuid.v4().replace(/-/g, '')\n    };\n  }\n\n  private backoffConfig() {\n    return Object.assign({\n      min: MINIMUM_RETRY_DELAY,\n      max: MAXIMUM_RETRY_DELAY,\n      maxAttemptsTime: MAXIMUM_ATTEMPTS_TIME,\n      randomness: RETRY_DELAY_RANDOMNESS\n    }, this.config.backoffConfig);\n  }\n\n  private executeWithRetry<T>(request: () => Promise<T>, retryWhenThrottled = true): Promise<T> {\n    return new Promise((resolve, reject) => {\n      let codesToRetryOn = [502, 503, 504];\n      if (retryWhenThrottled) {\n        codesToRetryOn.push(429);\n      }\n\n      let retrier = new Retrier(this.backoffConfig());\n      retrier.on('attempt', () => {\n        request()\n          .then(result => retrier.succeeded(result))\n          .catch(err => {\n            if (codesToRetryOn.includes(err.status)) {\n              let delayOverride = parseInt(err.headers ? err.headers['Retry-After'] : null);\n              retrier.failed(mapTransportError(err),\n                isNaN(delayOverride) ? null : delayOverride * 1000);\n            } else if (err.message === 'Twilsock disconnected') {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(mapTransportError(err));\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(mapTransportError(err));\n            }\n          });\n      });\n\n      retrier.on('succeeded', result => {\n        resolve(result);\n      });\n      retrier.on('cancelled', err => reject(mapTransportError(err)));\n      retrier.on('failed', err => reject(mapTransportError(err)));\n\n      retrier.start();\n    });\n  }\n\n  /**\n   * Make a GET request by given URI\n   * @Returns Promise<Response> Result of successful get request\n   */\n  get(uri: string): Promise<Response> {\n    let headers = this.createHeaders();\n    log.debug('GET', uri, 'ID:', headers['Twilio-Request-Id']);\n\n    return this.executeWithRetry(() => this.transport.get(uri, headers, this.config.productId), true);\n  }\n\n  post(uri: string, body: Object, revision?: string, retryWhenThrottled: boolean = false): Promise<Response> {\n    let headers = this.createHeaders();\n    if (typeof revision !== 'undefined' && revision !== null) {\n      headers['If-Match'] = revision;\n    }\n\n    log.debug('POST', uri, 'ID:', headers['Twilio-Request-Id']);\n    return this.executeWithRetry(() => this.transport.post(uri, headers, body, this.config.productId), retryWhenThrottled);\n  }\n\n  put(uri: string, body: Object, revision: string): Promise<Response> {\n    let headers = this.createHeaders();\n    if (typeof revision !== 'undefined' && revision !== null) {\n      headers['If-Match'] = revision;\n    }\n\n    log.debug('PUT', uri, 'ID:', headers['Twilio-Request-Id']);\n    return this.executeWithRetry(() => this.transport.put(uri, headers, body, this.config.productId), false);\n  }\n\n  delete(uri: string): Promise<Response> {\n    let headers = this.createHeaders();\n    log.debug('DELETE', uri, 'ID:', headers['Twilio-Request-Id']);\n    return this.executeWithRetry(() => this.transport.delete(uri, headers, this.config.productId), false);\n  }\n}\n\nexport { NetworkService };\n","import { Configuration, Storage } from '../interfaces/services';\n\ninterface StorageBackend {\n  setItem(key: string, value: string): void;\n\n  getItem(key: string): string;\n\n  removeItem(key: string): void;\n}\n\nclass SessionStorage implements Storage {\n  private readonly config: Configuration;\n  private readonly storage: StorageBackend;\n  private storageId: string;\n\n  constructor(config: Configuration, storage?: StorageBackend) {\n    this.config = config;\n    this.storageId = null;\n    try {\n      this.storage = storage || sessionStorage;\n    } catch (e) {\n    }\n  }\n\n  private storageKey(type: string, key: string) {\n    return `${this.storageId}::${type}::${key}`;\n  }\n\n  private get isReady(): boolean {\n    return this.config.sessionStorageEnabled && !!this.storageId;\n  }\n\n  updateStorageId(storageId: string) {\n    this.storageId = storageId;\n  }\n\n  store(type: string, id: string, value: Object) {\n    if (!this.isReady) {\n      return null;\n    }\n    return this._store(this.storageKey(type, id), value);\n  }\n\n  read(type: string, id: string): Object {\n    if (!this.isReady) {\n      return null;\n    }\n    return this._read(this.storageKey(type, id));\n  }\n\n  remove(type: string, sid: string, uniqueName: string): void {\n    if (!this.isReady) {\n      return null;\n    }\n    try {\n      this.storage.removeItem(this.storageKey(type, sid));\n      if (uniqueName) {\n        this.storage.removeItem(this.storageKey(type, uniqueName));\n      }\n    } catch (e) {\n    }\n  }\n\n  update(type: string, sid: string, uniqueName: string, patch: Object): void {\n    if (!this.isReady) {\n      return null;\n    }\n    // Currently cache may have root stored twice - by sid and by uniqueName\n    // Maybe need to create some index if needed\n    this._apply(this.storageKey(type, sid), patch);\n    if (uniqueName) {\n      this._apply(this.storageKey(type, uniqueName), patch);\n    }\n  }\n\n  private _store(key: string, value: Object) {\n    try {\n      this.storage.setItem(key, JSON.stringify(value));\n    } catch (e) {\n    }\n  }\n\n  private _read(key: string): Object {\n    try {\n      let storedData = this.storage.getItem(key);\n      if (storedData) {\n        return JSON.parse(storedData);\n      }\n    } catch (e) {\n    }\n    return null;\n  }\n\n  private _apply(key: string, patch: any): boolean {\n    let value = this._read(key);\n    if (!value) {\n      return false;\n    }\n    this._store(key, Object.assign(value, patch));\n  }\n}\n\nexport { StorageBackend, SessionStorage };\n","\nimport { Services, Network, Router, Storage } from './interfaces/services';\nimport { SyncError } from './utils/syncerror';\nimport { Closeable } from './closeable';\n\ninterface EntityServices {\n  network: Network;\n  router: Router;\n  storage: Storage;\n}\n\ntype RemovalHandler = (type: string, sid: string, uniqueName: string) => void;\nexport type SubscriptionState = 'none' | 'request_in_flight' | 'response_in_flight' | 'established';\n\nabstract class SyncEntity {\n  protected readonly services: EntityServices;\n  protected readonly removalHandler: RemovalHandler;\n  private subscriptionState: SubscriptionState;\n  private readonly _attachedListeners: Map<string, Closeable>;\n\n  protected constructor(services: EntityServices, removalHandler: RemovalHandler) {\n    this.services = services;\n    this.removalHandler = removalHandler;\n    this.subscriptionState = 'none';\n    this._attachedListeners = new Map<string, Closeable>();\n  }\n\n  abstract get sid(): string;\n\n  abstract get uniqueName(): string;\n\n  abstract get type(): string;\n\n  abstract get lastEventId(): number;\n\n  abstract get indexName(): string;\n\n  abstract get queryString(): string;\n\n  abstract _update(update: any, isStrictlyOrdered: boolean): void;\n\n  _advanceLastEventId(eventId: number, revision?: string): void {\n  }\n\n  protected abstract onRemoved(locally: boolean): void;\n\n  reportFailure(err: SyncError): void {\n    if (err.status === 404) {\n      // assume that 404 means that entity has been removed while we were away\n      this.onRemoved(false);\n    } else {\n      this.broadcastEventToListeners('failure', err);\n    }\n  }\n\n  /**\n   * Subscribe to changes of data entity\n   * @private\n   */\n  _subscribe() {\n    this.services.router._subscribe(this.sid, this);\n  }\n\n  /**\n   * Unsubscribe from changes of current data entity\n   * @private\n   */\n  _unsubscribe() {\n    this.services.router._unsubscribe(this.sid);\n  }\n\n  _setSubscriptionState(newState: SubscriptionState): void {\n    this.subscriptionState = newState;\n    this.broadcastEventToListeners('_subscriptionStateChanged', newState);\n  }\n\n  /**\n   * @public\n   */\n  close() {\n    this._unsubscribe();\n    if (this.removalHandler != null) {\n      this.removalHandler(this.type, this.sid, this.uniqueName);\n    }\n  }\n\n  public attach(closeable: Closeable): void {\n    const uuid = closeable.listenerUuid;\n    const existingRecord = this._attachedListeners.get(uuid);\n    if (existingRecord) {\n      return;\n    }\n\n    if (!this._attachedListeners.size) {\n      // the first one to arrive\n      this._subscribe();\n    }\n\n    this._attachedListeners.set(uuid, closeable);\n  }\n\n  public detach(listenerUuid: string): void {\n    this._attachedListeners.delete(listenerUuid);\n    if (!this._attachedListeners.size) {\n      // last one out, turn off lights, shut the door\n      this.close(); // invokes unsubscribe and removal handler\n    }\n  }\n\n  protected broadcastEventToListeners(eventName: string, args: any) {\n    for (let listener of this._attachedListeners.values()) {\n      listener.emit(eventName, args);\n    }\n  }\n}\n\nexport { Services, EntityServices, RemovalHandler, SyncEntity };\nexport default SyncEntity;\n","export type RequestFunction<InputType, ReturnType> = (input: InputType) => Promise<ReturnType>;\nexport type InputReducer<InputType> = (acc: InputType, input: InputType) => InputType;\n\nexport interface QueuedRequest<InputType, ReturnType> {\n  input: InputType;\n  requestFunction: RequestFunction<InputType, ReturnType>;\n  resolve: (result: ReturnType) => any;\n  reject: (error: any) => any;\n}\n\nexport class MergingQueue<InputType, ReturnType> {\n\n  private queuedRequests: QueuedRequest<InputType, ReturnType>[] = [];\n  private inputMergingFunction: InputReducer<InputType>;\n  private isRequestInFlight: boolean = false;\n\n  constructor(inputMergingFunction: InputReducer<InputType>) {\n    this.inputMergingFunction = inputMergingFunction;\n  }\n\n  public add(input: InputType, requestFunction: RequestFunction<InputType, ReturnType>): Promise<ReturnType> {\n    let promise: Promise<ReturnType> = new Promise((resolve, reject) =>\n      this.queuedRequests.push({input, requestFunction, resolve, reject})\n    );\n    this.wakeupQueue();\n\n    return promise;\n  }\n\n  public squashAndAdd(input: InputType, requestFunction: RequestFunction<InputType, ReturnType>): Promise<ReturnType> {\n    let queueToSquash = this.queuedRequests;\n    this.queuedRequests = [];\n\n    let reducedInput;\n    if (queueToSquash.length > 0) {\n      reducedInput = queueToSquash.map(r => r.input).reduce(this.inputMergingFunction);\n      reducedInput = this.inputMergingFunction(reducedInput, input);\n    } else {\n      reducedInput = input;\n    }\n\n    let promise = this.add(reducedInput, requestFunction);\n\n    queueToSquash.forEach(request => promise.then(request.resolve, request.reject));\n    return promise;\n  }\n\n  public isEmpty(): boolean {\n    return this.queuedRequests.length === 0 && !this.isRequestInFlight;\n  }\n\n  private wakeupQueue() {\n    if (this.queuedRequests.length === 0 || this.isRequestInFlight) {\n      return;\n    } else {\n      let requestToExecute = this.queuedRequests.shift();\n      this.isRequestInFlight = true;\n      requestToExecute.requestFunction(requestToExecute.input)\n        .then(requestToExecute.resolve, requestToExecute.reject)\n        .then(__ => {\n          this.isRequestInFlight = false;\n          this.wakeupQueue();\n        });\n    }\n  }\n}\n\nexport class NamespacedMergingQueue<K, InputType, ReturnType> {\n\n  private inputReducer: InputReducer<InputType>;\n  private queueByNamespaceKey: Map<K, MergingQueue<InputType, ReturnType>> = new Map<K, MergingQueue<InputType, ReturnType>>();\n\n  constructor(inputReducer: InputReducer<InputType>) {\n    this.inputReducer = inputReducer;\n  }\n\n  public async add(namespaceKey: K, input: InputType, requestFunction: RequestFunction<InputType, ReturnType>): Promise<ReturnType> {\n    return this.invokeQueueMethod(namespaceKey, queue => queue.add(input, requestFunction));\n  }\n\n  public async squashAndAdd(namespaceKey: K, input: InputType, requestFunction: RequestFunction<InputType, ReturnType>): Promise<ReturnType> {\n    return this.invokeQueueMethod(namespaceKey, queue => queue.squashAndAdd(input, requestFunction));\n  }\n\n  public async invokeQueueMethod(\n    namespaceKey: K,\n    queueMethodInvoker: (queue: MergingQueue<InputType, ReturnType>) => Promise<ReturnType>): Promise<ReturnType> {\n\n    if (!this.queueByNamespaceKey.has(namespaceKey)) {\n      this.queueByNamespaceKey.set(namespaceKey, new MergingQueue<InputType, ReturnType>(this.inputReducer));\n    }\n    const queue = this.queueByNamespaceKey.get(namespaceKey);\n    const result = queueMethodInvoker(queue);\n    if (this.queueByNamespaceKey.get(namespaceKey).isEmpty()) {\n      this.queueByNamespaceKey.delete(namespaceKey);\n    }\n    return result;\n  }\n}\n","import { EventEmitter } from 'events';\nimport { v4 as uuidv4 } from 'uuid';\n\nabstract class Closeable extends EventEmitter {\n\n  private readonly uuid: string;\n  private closed: boolean;\n\n  constructor() {\n    super();\n    this.closed = false;\n    this.uuid = uuidv4();\n  }\n\n  get listenerUuid(): string {\n    return this.uuid;\n  }\n\n  protected close() {\n    this.removeAllListeners();\n    this.closed = true;\n  }\n\n  protected ensureNotClosed() {\n    if (this.closed) {\n      throw new Error('Invalid operation on closed object');\n    }\n  }\n\n}\nexport { Closeable };\nexport default Closeable;","import { SyncError } from './utils/syncerror';\nimport { deepClone } from './utils/sanitize';\nimport log from './utils/logger';\n\nimport { SyncEntity, EntityServices, RemovalHandler } from './entity';\nimport { Mutator } from './interfaces/mutator';\nimport { MergingQueue } from './mergingqueue';\nimport Closeable from './closeable';\nimport { nonNegativeInteger, objectSchema, pureObject, validateTypesAsync } from '@twilio/declarative-type-validator';\n\ninterface DocumentServices extends EntityServices {\n}\n\ninterface DocumentDescriptor {\n  url: string;\n  sid: string;\n  revision: string;\n  last_event_id: number;\n  unique_name: string;\n  data: Object;\n  date_updated: Date;\n  date_expires: string;\n}\n\ninterface DocumentUpdateRequest {\n  data?: Object;\n  ttl?: number;\n  revision?: string;\n}\n\ninterface DocumentUpdateResult {\n  revision: string;\n  data: Object;\n  last_event_id: number;\n  date_updated: Date;\n  date_expires: string | null;\n}\n\n/**\n * Document metadata.\n */\ninterface SyncDocumentMetadata {\n  /**\n   * Specifies the time-to-live in seconds after which the document is subject to automatic deletion.\n   * The value 0 means infinity.\n   */\n  ttl?: number;\n}\n\nclass SyncDocumentImpl extends SyncEntity {\n\n  private readonly updateMergingQueue: MergingQueue<SyncDocumentMetadata, Object>;\n  private readonly descriptor: DocumentDescriptor;\n  private isDeleted: boolean = false;\n\n  /**\n   * @internal\n   */\n  constructor(services: DocumentServices, descriptor: DocumentDescriptor, removalHandler: RemovalHandler) {\n    super(services, removalHandler);\n\n    const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? {ttl: input.ttl}\n      : acc;\n    this.updateMergingQueue = new MergingQueue<SyncDocumentMetadata, Object>(updateRequestReducer);\n    this.descriptor = descriptor;\n    this.descriptor.data = this.descriptor.data || {};\n    this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n  }\n\n  // private props\n  get uri(): string {\n    return this.descriptor.url;\n  }\n\n  get revision(): string {\n    return this.descriptor.revision;\n  }\n\n  get lastEventId(): number {\n    return this.descriptor.last_event_id;\n  }\n\n  get dateExpires(): string {\n    return this.descriptor.date_expires;\n  }\n\n  static get type() {\n    return 'document';\n  }\n\n  get type() {\n    return 'document';\n  }\n\n  // below properties are specific to Insights only\n  get indexName(): string {\n    return undefined;\n  }\n\n  get queryString(): string {\n    return undefined;\n  }\n\n  // public props, documented along with class description\n  get sid(): string {\n    return this.descriptor.sid;\n  }\n\n  get data(): Object {\n    return this.descriptor.data;\n  }\n\n  get dateUpdated(): Date {\n    return this.descriptor.date_updated;\n  }\n\n  get uniqueName(): string {\n    return this.descriptor.unique_name || null;\n  }\n\n  /**\n   * Update data entity with new data\n   * @private\n   */\n  _update(update): void {\n    update.date_created = new Date(update.date_created);\n    switch (update.type) {\n      case 'document_updated':\n        if (update.id <= this.lastEventId) {\n          log.trace('Document update skipped, current:', this.lastEventId, ', remote:', update.id);\n          break;\n        }\n\n        const previousData = this.descriptor.data !== undefined ? deepClone(this.descriptor.data) : null;\n\n        this.descriptor.last_event_id = update.id;\n        this.descriptor.revision = update.document_revision;\n        this.descriptor.date_updated = update.date_created;\n        this.descriptor.data = update.document_data;\n\n        this.broadcastEventToListeners('updated', {data: update.document_data, isLocal: false, previousData});\n        this.services.storage.update(this.type, this.sid, this.uniqueName,\n          {\n            last_event_id: update.id,\n            revision: update.document_revision,\n            date_updated: update.date_created,\n            data: update.document_data\n          });\n        break;\n      case 'document_removed':\n        this.onRemoved(false);\n        break;\n    }\n  }\n\n  public async set(value: Object, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    const input: SyncDocumentMetadata = metadataUpdates || {};\n    return this.updateMergingQueue.squashAndAdd(input, input => this._setUnconditionally(value, input.ttl));\n  }\n\n  public async mutate(mutator: Mutator, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    const input: SyncDocumentMetadata = metadataUpdates || {};\n    return this.updateMergingQueue.add(input, input => this._setWithIfMatch(mutator, input.ttl));\n  }\n\n  public async update(obj: Object, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    return this.mutate(remote => Object.assign(remote, obj), metadataUpdates);\n  }\n\n  public async setTtl(ttl: number): Promise<void> {\n    const response = await this._postUpdateToServer({ttl});\n    this.descriptor.date_expires = response.date_expires;\n  }\n\n  /**\n   * @private\n   */\n  private async _setUnconditionally(value: Object, ttl?: number): Promise<Object> {\n    let result = await this._postUpdateToServer({data: value, revision: undefined, ttl});\n    this._handleSuccessfulUpdateResult(result);\n    return this.descriptor.data;\n  }\n\n  /**\n   * @private\n   */\n  private async _setWithIfMatch(mutatorFunction: Mutator, ttl?: number): Promise<Object> {\n    let data = mutatorFunction(deepClone(this.descriptor.data));\n    if (data) {\n      let revision = this.revision;\n      try {\n        let result = await this._postUpdateToServer({data, revision, ttl});\n        this._handleSuccessfulUpdateResult(result);\n        return this.descriptor.data;\n      } catch (error) {\n        if (error.status === 412) {\n          await this._softSync();\n          return this._setWithIfMatch(mutatorFunction);\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      return this.descriptor.data;\n    }\n  }\n\n  /**\n   * @private\n   */\n  private _handleSuccessfulUpdateResult(result: DocumentUpdateResult) {\n    // Ignore returned value if we already got a newer one\n    if (result.last_event_id <= this.descriptor.last_event_id) {\n      return;\n    }\n\n    const previousData = this.descriptor.data !== undefined ? deepClone(this.descriptor.data) : null;\n\n    this.descriptor.revision = result.revision;\n    this.descriptor.data = result.data;\n    this.descriptor.last_event_id = result.last_event_id;\n    this.descriptor.date_expires = result.date_expires;\n    this.descriptor.date_updated = new Date(result.date_updated);\n\n    this.services.storage.update(this.type, this.sid, this.uniqueName,\n      {\n        last_event_id: result.last_event_id,\n        revision: result.revision,\n        date_updated: result.date_updated,\n        data: result.data\n      });\n    this.broadcastEventToListeners('updated', {data: this.descriptor.data, isLocal: true, previousData});\n  }\n\n  /**\n   * @private\n   */\n  private async _postUpdateToServer(request: DocumentUpdateRequest): Promise<DocumentUpdateResult> {\n    if (!this.isDeleted) {\n      const requestBody: any = {\n        data: request.data\n      };\n\n      if (request.ttl !== undefined) {\n        requestBody.ttl = request.ttl;\n      }\n\n      const ifMatch = request.revision;\n      try {\n        const response = await this.services.network.post(this.uri, requestBody, ifMatch);\n        return {\n          revision: response.body.revision,\n          data: request.data,\n          last_event_id: response.body.last_event_id,\n          date_updated: response.body.date_updated,\n          date_expires: response.body.date_expires\n        };\n      } catch (error) {\n        if (error.status === 404) {\n          this.onRemoved(false);\n        }\n        throw error;\n      }\n    } else {\n      return Promise.reject(new SyncError('The Document has been removed', 404, 54100));\n    }\n  }\n\n  /**\n   * Get new data from server\n   * @private\n   */\n  private async _softSync() {\n    return this.services.network.get(this.uri)\n      .then(response => {\n        const event = {\n          type: 'document_updated',\n          id: response.body.last_event_id,\n          document_revision: response.body.revision,\n          document_data: response.body.data,\n          date_created: response.body.date_updated\n        };\n        this._update(event);\n        return this;\n      })\n      .catch(err => {\n        if (err.status === 404) {\n          this.onRemoved(false);\n        } else {\n          log.error(`Can't get updates for ${this.sid}:`, err);\n        }\n      });\n  }\n\n  protected onRemoved(locally: boolean) {\n    if (this.isDeleted) {\n      return;\n    }\n\n    const previousData = this.descriptor.data !== undefined ? deepClone(this.descriptor.data) : null;\n\n    this.isDeleted = true;\n    this._unsubscribe();\n    this.removalHandler(this.type, this.sid, this.uniqueName);\n    this.broadcastEventToListeners('removed', {isLocal: locally, previousData});\n  }\n\n  public async removeDocument() {\n    if (!this.isDeleted) {\n      await this.services.network.delete(this.uri);\n      this.onRemoved(true);\n    } else {\n      return Promise.reject(new SyncError('The Document has been removed', 404, 54100));\n    }\n  }\n\n}\n\n/**\n * Represents a Sync document, the contents of which is a single JSON object.\n * Use the {@link SyncClient.document} method to obtain a reference to a Sync document.\n * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).\n */\nclass SyncDocument extends Closeable {\n\n  private readonly syncDocumentImpl: SyncDocumentImpl;\n\n  // private props\n  get uri(): string {\n    return this.syncDocumentImpl.uri;\n  }\n\n  get revision(): string {\n    return this.syncDocumentImpl.revision;\n  }\n\n  get lastEventId(): number {\n    return this.syncDocumentImpl.lastEventId;\n  }\n\n  get dateExpires(): string {\n    return this.syncDocumentImpl.dateExpires;\n  }\n\n  static get type() {\n    return SyncDocumentImpl.type;\n  }\n\n  get type() {\n    return SyncDocumentImpl.type;\n  }\n\n  /**\n   * The immutable identifier of this document, assigned by the system.\n   */\n  get sid(): string {\n    return this.syncDocumentImpl.sid;\n  }\n\n  /**\n   * The contents of this document.\n   */\n  get data(): Object {\n    return this.syncDocumentImpl.data;\n  }\n\n  /**\n   * Date when the document was last updated.\n   */\n  get dateUpdated(): Date {\n    return this.syncDocumentImpl.dateUpdated;\n  }\n\n  /**\n   * An optional immutable identifier that may be assigned by the programmer\n   * to this document during creation. Globally unique among other documents.\n   */\n  get uniqueName(): string {\n    return this.syncDocumentImpl.uniqueName;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(syncDocumentImpl: SyncDocumentImpl) {\n    super();\n    this.syncDocumentImpl = syncDocumentImpl;\n    this.syncDocumentImpl.attach(this);\n  }\n\n  /**\n   * Fired when the document is removed, regardless of whether the remover was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has following properties:\n   *     * boolean `isLocal` - is true if document was removed by a local actor, false otherwise\n   *     * object `previousData` - contains a snapshot of the document data before removal\n   * @example\n   * ```typescript\n   * document.on('removed', (args) => {\n   *   console.log(`Document ${document.sid} was removed`);\n   *   console.log('args.isLocal:', args.isLocal);\n   *   console.log('args.previousData:', args.previousData);\n   * });\n   * ```\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Fired when the document's contents have changed, regardless of whether the updater was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * boolean `isLocal` - is true if document was updated by a local actor, false otherwise\n   *     * object `data` - a snapshot of the document's new contents\n   *     * object `previousData` - contains a snapshot of the document data before the update\n   * @example\n   * ```typescript\n   * document.on('updated', (args) => {\n   *   console.log(`Document ${document.sid} was updated`);\n   *   console.log('args.data:', args.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   *   console.log('args.previousData:', args.previousData);\n   * });\n   * ```\n   * @event\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * Assign new contents to this document. The current data will be overwritten.\n   * @param data The new contents to assign.\n   * @param metadataUpdates New document metadata.\n   * @return A promise resolving to the new data of the document.\n   * @example\n   * ```typescript\n   * // Say, the Document data is `{ name: 'John Smith', age: 34 }`\n   * document.set({ name: 'Barbara Oaks' }, { ttl: 86400 })\n   *   .then((newValue) => {\n   *     // Now the Document data is `{ name: 'Barbara Oaks' }`\n   *     console.log('Document set() successful, new data:', newValue);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Document set() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    pureObject,\n    [\n      'undefined',\n      objectSchema('document metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async set(data: Object, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    this.ensureNotClosed();\n    return this.syncDocumentImpl.set(data, metadataUpdates);\n  }\n\n  /**\n   * Schedules a modification to this document that will apply a mutation function.\n   * @param mutator A function that outputs new data based on the existing data.\n   * May be called multiple times, particularly if this document is modified concurrently by remote code.\n   * If the mutation ultimately succeeds, the document will have made the particular transition described\n   * by this function.\n   * @param metadataUpdates New document metadata.\n   * @return Resolves with the most recent Document state, whether the output of a\n   * successful mutation or a state that prompted graceful cancellation (mutator returned `null`).\n   * @example\n   * ```typescript\n   * const mutatorFunction = (currentValue) => {\n   *     currentValue.viewCount = (currentValue.viewCount ?? 0) + 1;\n   *     return currentValue;\n   * };\n   * document.mutate(mutatorFunction, { ttl: 86400 }))\n   *   .then((newValue) => {\n   *     console.log('Document mutate() successful, new data:', newValue);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Document mutate() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    'function',\n    [\n      'undefined',\n      objectSchema('document metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async mutate(mutator: Mutator, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    this.ensureNotClosed();\n    return this.syncDocumentImpl.mutate(mutator, metadataUpdates);\n  }\n\n  /**\n   * Modify a document by appending new fields (or by overwriting existing ones) with the values from the provided Object.\n   * This is equivalent to:\n   * ```typescript\n   * document.mutate((currentValue) => Object.assign(currentValue, obj));\n   * ```\n   * @param obj Specifies the particular (top-level) attributes that will receive new values.\n   * @param metadataUpdates New document metadata.\n   * @return A promise resolving to the new data of the document.\n   * @example\n   * ```typescript\n   * // Say, the Document data is `{ name: 'John Smith' }`\n   * document.update({ age: 34 }, { ttl: 86400 })\n   *   .then((newValue) => {\n   *     // Now the Document data is `{ name: 'John Smith', age: 34 }`\n   *     console.log('Document update() successful, new data:', newValue);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Document update() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    pureObject,\n    [\n      'undefined',\n      objectSchema('document metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async update(obj: Object, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    this.ensureNotClosed();\n    return this.syncDocumentImpl.update(obj, metadataUpdates);\n  }\n\n  /**\n   * Update the time-to-live of the document.\n   * @param ttl Specifies the time-to-live in seconds after which the document is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * document.setTtl(3600)\n   *   .then(() => {\n   *     console.log('Document setTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Document setTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async setTtl(ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncDocumentImpl.setTtl(ttl);\n  }\n\n  /**\n   * Delete a document.\n   * @return A promise which resolves if (and only if) the document is ultimately deleted.\n   * @example\n   * ```typescript\n   * document.removeDocument()\n   *   .then(() => {\n   *     console.log('Document removeDocument() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Document removeDocument() failed', error);\n   *   });\n   * ```\n   */\n  public async removeDocument() {\n    this.ensureNotClosed();\n    return this.syncDocumentImpl.removeDocument();\n  }\n\n  /**\n   * Conclude work with the document instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this document will continue operating and receiving events normally.\n   * @example\n   * ```typescript\n   * document.close();\n   * ```\n   */\n  public close(): void {\n    super.close();\n    this.syncDocumentImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexport { SyncDocumentMetadata, DocumentServices, DocumentDescriptor, Mutator, SyncDocument, SyncDocumentImpl };\nexport default SyncDocument;\n","export interface SyncListItemDescriptor {\n  index: number;\n  uri: string;\n  data: Object;\n  revision: string;\n  lastEventId: number;\n  dateUpdated: Date;\n  dateExpires: string;\n}\n\n/**\n * Represents an individual element in a Sync list.\n */\nclass SyncListItem {\n  private readonly descriptor: SyncListItemDescriptor;\n\n  /**\n   * @param descriptor Item descriptor\n   * @internal\n   */\n  constructor(descriptor: SyncListItemDescriptor) {\n    this.descriptor = descriptor;\n  }\n\n  get uri(): string {\n    return this.descriptor.uri;\n  }\n\n  get revision(): string {\n    return this.descriptor.revision;\n  }\n\n  get lastEventId(): number {\n    return this.descriptor.lastEventId;\n  }\n\n  /**\n   * Date when the list item was last updated.\n   */\n  get dateUpdated(): Date {\n    return this.descriptor.dateUpdated;\n  }\n\n  get dateExpires(): string {\n    return this.descriptor.dateExpires;\n  }\n\n  /**\n   * The index, within the containing list, of this item. This index is stable;\n   * even if lower-indexed items are removed, this index will remain as is.\n   */\n  get index(): number {\n    return this.descriptor.index;\n  }\n\n  /**\n   * The contents of the item.\n   */\n  get data(): Object {\n    return this.descriptor.data;\n  }\n\n  /**\n   * @internal\n   */\n  update(eventId: number, revision: string, data: Object, dateUpdated: Date): SyncListItem {\n    this.descriptor.lastEventId = eventId;\n    this.descriptor.revision = revision;\n    this.descriptor.data = data;\n    this.descriptor.dateUpdated = dateUpdated;\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  updateDateExpires(dateExpires: string) {\n    this.descriptor.dateExpires = dateExpires;\n  }\n}\n\nexport { SyncListItem };\n","/**\n * Pagination helper class.\n */\nclass Paginator<Item> {\n  private prevToken: string;\n  private nextToken: string;\n  private source: any;\n\n  /**\n   * Array of elements on current page.\n   */\n  public readonly items: Item[];\n\n  /**\n   * @internal\n   */\n  constructor(items: any, source: any, prevToken: string, nextToken: string) {\n    this.prevToken = prevToken;\n    this.nextToken = nextToken;\n\n    this.items = items;\n    this.source = source;\n  }\n\n  /**\n   * Indicates the existence of the next page.\n   */\n  get hasNextPage(): boolean {\n    return !!this.nextToken;\n  }\n\n  /**\n   * Indicates the existence of the previous page.\n   */\n  get hasPrevPage(): boolean {\n    return !!this.prevToken;\n  }\n\n  /**\n   * Request next page.\n   * Does not modify existing object.\n   */\n  async nextPage(): Promise<Paginator<Item>> {\n    if (!this.hasNextPage) {\n      throw new Error('No next page');\n    }\n\n    return this.source(this.nextToken);\n  }\n\n  /**\n   * Request previous page.\n   * Does not modify existing object.\n   */\n  async prevPage(): Promise<Paginator<Item>> {\n    if (!this.hasPrevPage) {\n      throw new Error('No previous page');\n    }\n\n    return this.source(this.prevToken);\n  }\n}\n\nexport { Paginator };\n","interface Map<K, V> {\n  get(key: K): V;\n  set(key: K, value: V): void;\n}\n\ninterface TreeMapInterface<K, V> extends Map<K, V>, Iterable<[K, V]> {\n\n}\n\ninterface HashMap<K, V> extends Map<K, V> {\n\n}\n\nclass Node<K, V> {\n  parent: Node<K, V>;\n  left: Node<K, V>;\n  right: Node<K, V>;\n  balanceFactor: number;\n\n  key: K;\n  value: V;\n\n  constructor(key: K, value: V) {\n    this.balanceFactor = 0;\n    this.key = key;\n    this.value = value;\n    this.parent = null;\n    this.left = null;\n    this.right = null;\n  }\n\n  get isRoot(): boolean { return this.parent === null; }\n  get isLeaf(): boolean { return (this.left === null) && (this.right === null); }\n  get isLeftChild(): boolean { return this.parent.left === this; }\n\n  update(value: V) {\n    this.value = value;\n  }\n\n  replace(target: Node<K, V>, replacement: Node<K, V>) {\n    if (!target) {\n      return;\n    }\n\n    if (this.left === replacement) {\n      this.left = replacement;\n    } else if (this.right === replacement) {\n      this.right = replacement;\n    }\n  }\n}\n\ntype Less<T> = (x: T, y: T) => boolean;\ntype Equal<T> = (x: T, y: T) => boolean;\n\n/**\n * @property length\n */\nclass TreeMap<K, V> implements TreeMapInterface<K, V> {\n  private isLessThan: Less<K>;\n  private isEqual: Equal<K>;\n\n  private root: Node<K, V>;\n  private count: number;\n\n  constructor(less?: Less<K>, equal?: Equal<K>) {\n    this.isLessThan = less || ((x, y) => x < y);\n    this.isEqual = equal || ((x, y) => x === y);\n    this.root = null;\n    this.count = null;\n  }\n\n  get size(): number { return this.count; }\n\n  clear() {\n    this.root = null;\n    this.count = 0;\n  }\n\n  set(key: K, value: V): void {\n    let node = this.getNode(key);\n    if (node) {\n      node.update(value);\n    } else {\n      this.insert(key, value);\n    }\n    // return node;\n  }\n\n  insert(key: K, value: V): void {\n    let node = new Node(key, value);\n    this.count++;\n\n    if (!this.root) {\n      this.root = node;\n      // return node;\n      return;\n    }\n\n    let currNode = this.root;\n    for (;;) {\n      if (this.isLessThan(key, currNode.key)) {\n        if (currNode.left) {\n          currNode = currNode.left;\n        } else {\n          currNode.left = node;\n          break;\n        }\n      } else {\n        if (currNode.right) { // eslint-disable-line no-lonely-if\n          currNode = currNode.right;\n        } else {\n          currNode.right = node;\n          break;\n        }\n      }\n    }\n\n    node.parent = currNode;\n    currNode = node;\n    while (currNode.parent) {\n      let parent = currNode.parent;\n      let prevBalanceFactor = parent.balanceFactor;\n\n      if (currNode.isLeftChild) {\n        parent.balanceFactor++;\n      } else {\n        parent.balanceFactor--;\n      }\n\n      if (Math.abs(parent.balanceFactor) < Math.abs(prevBalanceFactor)) {\n        break;\n      }\n\n      if (parent.balanceFactor < -1 || parent.balanceFactor > 1) {\n        this.rebalance(parent);\n        break;\n      }\n\n      currNode = parent;\n    }\n\n    // return node;\n  }\n\n  get(key: K): V {\n    let currentNode = this.root;\n    while (currentNode) {\n      if (this.isEqual(key, currentNode.key)) {\n        return currentNode.value;\n      }\n\n      if (this.isLessThan(key, currentNode.key)) {\n        currentNode = currentNode.left;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n    return null;\n  }\n\n  delete(key: K): void {\n    // update this algorithm and remove any\n    let node = this.getNode(key) as any;\n    if (!node || node.key !== key) {\n      return null;\n    }\n\n    let parent = node.parent;\n    let left = node.left;\n    let right = node.right;\n\n    if (!!left !== !!right) { // one child\n      let child = left || right;\n      if (!parent && !child) {\n        this.root = null;\n      } else if (parent && !child) {\n        this.root = child;\n      } else {\n        parent.replace(node, null);\n        this.rebalance(parent);\n      }\n    } else { // two children\n      let maxLeft = node.left;\n      while (maxLeft.right) {\n        maxLeft = maxLeft.right;\n      }\n\n      if (node.left === maxLeft) {\n        if (node.isRoot) {\n          this.root = maxLeft;\n          maxLeft.parent = null;\n        } else {\n          if (node.isLeftChild) {\n            node.parent.left = maxLeft;\n          } else {\n            node.parent.right = maxLeft;\n          }\n          maxLeft.parent = node.parent;\n        }\n\n        maxLeft.right = node.right;\n        maxLeft.right.parent = maxLeft;\n        maxLeft.balanceFactor = node.balanceFactor;\n        node = {\n          parent: maxLeft, isLeftChild: true\n        };\n      } else {\n        let mlParent = maxLeft.parent;\n        let mlLeft = maxLeft.left;\n\n        mlParent.right = mlLeft;\n        if (mlLeft) {\n          mlLeft.parent = mlParent;\n        }\n\n        if (node.isRoot) {\n          this.root = maxLeft;\n          maxLeft.parent = null;\n        } else {\n          if (node.isLeftChild) {\n            node.parent.left = maxLeft;\n          } else {\n            node.parent.right = maxLeft;\n          }\n          maxLeft.parent = node.parent;\n        }\n\n        maxLeft.right = node.right;\n        maxLeft.right.parent = maxLeft;\n        maxLeft.left = node.left;\n        maxLeft.left.parent = maxLeft;\n        maxLeft.balanceFactor = node.balanceFactor;\n\n        node = {\n          parent: mlParent, isLeftChild: false\n        };\n      }\n    }\n\n    this.count--;\n\n    while (node.parent) {\n      let parent = node.parent;\n      let prevBalanceFactor = parent.balanceFactor;\n\n      if (node.isLeftChild) {\n        parent.balanceFactor -= 1;\n      } else {\n        parent.balanceFactor += 1;\n      }\n\n      if (Math.abs(parent.balanceFactor) > Math.abs(prevBalanceFactor)) {\n        if (parent.balanceFactor < -1 || parent.balanceFactor > 1) {\n          this.rebalance(parent);\n\n          if (parent.parent.balanceFactor === 0) {\n            node = parent.parent;\n          } else {\n            break;\n          }\n        } else {\n          break;\n        }\n      } else {\n        node = parent;\n      }\n    }\n\n    return null;\n  }\n\n  private getNode(key: K): Node<K, V> {\n    let currentNode = this.root;\n    while (currentNode) {\n      if (this.isEqual(key, currentNode.key)) {\n        return currentNode;\n      }\n\n      if (this.isLessThan(key, currentNode.key)) {\n        currentNode = currentNode.left;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n    return null;\n  }\n\n  private rebalance(node: Node<K, V>) {\n    if (node.balanceFactor < 0) {\n      if (node.right.balanceFactor > 0) {\n        this.rotateRight(node.right);\n        this.rotateLeft(node);\n      } else {\n        this.rotateLeft(node);\n      }\n    } else if (node.balanceFactor > 0) {\n      if (node.left.balanceFactor < 0) {\n        this.rotateLeft(node.left);\n        this.rotateRight(node);\n      } else {\n        this.rotateRight(node);\n      }\n    }\n  }\n\n  private rotateLeft(pivot: Node<K, V>) {\n    let root = pivot.right;\n    pivot.right = root.left;\n    if (root.left !== null) {\n      root.left.parent = pivot;\n    }\n\n    root.parent = pivot.parent;\n    if (root.parent === null) {\n      this.root = root;\n    } else if (pivot.isLeftChild) {\n      root.parent.left = root;\n    } else {\n      root.parent.right = root;\n    }\n\n    root.left = pivot;\n    pivot.parent = root;\n    pivot.balanceFactor = pivot.balanceFactor + 1 - Math.min(root.balanceFactor, 0);\n    root.balanceFactor = root.balanceFactor + 1 - Math.max(pivot.balanceFactor, 0);\n  }\n\n  private rotateRight(pivot: Node<K, V>) {\n    let root = pivot.left;\n    pivot.left = root.right;\n    if (root.right !== null) {\n      root.right.parent = pivot;\n    }\n\n    root.parent = pivot.parent;\n    if (root.parent === null) {\n      this.root = root;\n    } else if (pivot.isLeftChild) {\n      root.parent.left = root;\n    } else {\n      root.parent.right = root;\n    }\n\n    root.right = pivot;\n    pivot.parent = root;\n    pivot.balanceFactor = pivot.balanceFactor - 1 - Math.min(root.balanceFactor, 0);\n    root.balanceFactor = root.balanceFactor - 1 - Math.max(pivot.balanceFactor, 0);\n  }\n\n  *[Symbol.iterator](): IterableIterator<[K, V]> {\n    for (let iter of this.getIterator()) {\n      yield iter;\n    }\n  }\n\n  *getIterator(key: K = null): IterableIterator<[K, V]> {\n    let currentNode = this.root;\n    while (currentNode) {\n      if (this.isEqual(key, currentNode.key) || ((key === null) && !currentNode.left)) {\n        break;\n      }\n\n      if (this.isLessThan(key, currentNode.key) || (key === null)) {\n        currentNode = currentNode.left;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n\n    if (!currentNode) {\n      return null;\n    }\n\n    let fromleft = true;\n    for (;;) {\n      if (fromleft) {\n        yield [currentNode.key, currentNode.value];\n        fromleft = false;\n\n        if (currentNode.right) {\n          currentNode = currentNode.right;\n          while (currentNode.left) {\n            currentNode = currentNode.left;\n          }\n          fromleft = true;\n        } else if (currentNode.parent) {\n          fromleft = (currentNode.parent.left === currentNode);\n          currentNode = currentNode.parent;\n        } else {\n          break;\n        }\n      } else if (currentNode.parent) {\n        fromleft = (currentNode.parent.left === currentNode);\n        currentNode = currentNode.parent;\n      } else {\n        break;\n      }\n    }\n\n    return null;\n  }\n\n  *getReverseIterator(key: K = null): IterableIterator<[K, V]> {\n    let currentNode = this.root;\n    while (currentNode) {\n      if (this.isEqual(key, currentNode.key) || ((key === null) && !currentNode.right)) {\n        break;\n      }\n\n      if (!this.isLessThan(key, currentNode.key) || (key === null)) {\n        currentNode = currentNode.right;\n      } else {\n        currentNode = currentNode.left;\n      }\n    }\n\n    if (!currentNode) {\n      return null;\n    }\n\n    let fromright = true;\n    for (;;) {\n      if (fromright) {\n        yield [currentNode.key, currentNode.value];\n        fromright = false;\n\n        if (currentNode.left) {\n          currentNode = currentNode.left;\n          while (currentNode.right) {\n            currentNode = currentNode.right;\n          }\n          fromright = true;\n        } else if (currentNode.parent) {\n          fromright = (currentNode.parent.right === currentNode);\n          currentNode = currentNode.parent;\n        } else {\n          break;\n        }\n      } else if (currentNode.parent) {\n        fromright = (currentNode.parent.right === currentNode);\n        currentNode = currentNode.parent;\n      } else {\n        break;\n      }\n    }\n\n    return null;\n  }\n}\n\nexport { Map, Less, Equal, TreeMapInterface, TreeMap };\n","import { TreeMap } from './utils/tree';\n\ninterface CacheEntry<T> {\n  value: T;\n  revision: number;\n  isValid: boolean;\n}\n\nclass Entry<T> implements CacheEntry<T> {\n  value: T;\n  revision: number;\n\n  constructor(value: T, revision: number) {\n    this.value = value;\n    this.revision = (revision || 0);\n  }\n\n  get isValid(): boolean {\n    return true;\n  }\n}\n\nclass Tombstone<T> implements CacheEntry<T> {\n  value: T;\n  revision: number;\n\n  constructor(revision: number) {\n    this.revision = revision;\n  }\n\n  get isValid(): boolean {\n    return false;\n  }\n}\n\nclass Cache<K, V> {\n  public readonly items: TreeMap<K, CacheEntry<V>>;\n\n  constructor() {\n    this.items = new TreeMap<K, CacheEntry<V>>();\n  }\n\n  store(key: K, value: V, revision: number): V {\n    let entry = this.items.get(key);\n    if (entry && entry.revision > revision) {\n      if (entry.isValid) {\n        return entry.value;\n      }\n      return null;\n    }\n    this.items.set(key, new Entry<V>(value, revision));\n    return value;\n  }\n\n  delete(key: K, revision: number, force: boolean = false): void {\n    let curr = this.items.get(key);\n    if (!curr || curr.revision < revision ||\n      (curr && force === true) /* forced delete when revision is unknown */) {\n      this.items.set(key, new Tombstone<V>(revision));\n    }\n  }\n\n  isKnown(key: K, revision: number): boolean {\n    let curr = this.items.get(key);\n    return curr && curr.revision >= revision;\n  }\n\n  get(key: K): V {\n    let entry = this.items.get(key);\n    if (entry && entry.isValid) {\n      return entry.value;\n    }\n    return null;\n  }\n\n  has(key: K): boolean {\n    let entry = this.items.get(key);\n    return entry && entry.isValid;\n  }\n\n  forEach(callbackfn: (key: K, value: V) => void): void {\n    if (this.items) {\n      for (let [key, entry] of this.items) {\n        if (entry.isValid) {\n          callbackfn(key, entry.value);\n        }\n      }\n    }\n  }\n}\n\nexport { Cache };\nexport default Cache;\n","import { deepClone, isPositiveInteger, validatePageSize } from './utils/sanitize';\nimport { UriBuilder } from './utils/uri';\nimport { SyncError } from './utils/syncerror';\nimport log from './utils/logger';\n\nimport { SyncEntity, EntityServices, RemovalHandler } from './entity';\nimport { SyncListItem } from './synclistitem';\nimport { Paginator } from './paginator';\nimport { Cache } from './cache';\n\nimport { Mutator } from './interfaces/mutator';\nimport { NamespacedMergingQueue } from './mergingqueue';\nimport Closeable from './closeable';\nimport { custom, nonNegativeInteger, objectSchema, pureObject, validateTypesAsync } from '@twilio/declarative-type-validator';\n\ninterface SyncListServices extends EntityServices {\n}\n\ninterface SyncListDescriptor {\n  sid: string;\n  url: string;\n  revision: string;\n  last_event_id: number;\n  links: any;\n  unique_name: string;\n  date_updated: Date;\n  date_expires: string;\n}\n\n/**\n * List item metadata.\n */\ninterface SyncListItemMetadata {\n  /**\n   * Specifies the time-to-live in seconds after which the list item is subject to automatic deletion.\n   * The value 0 means infinity.\n   */\n  ttl?: number;\n}\n\n/**\n * List item query options.\n */\ninterface SyncListItemQueryOptions {\n  /**\n   * Item index, which should be used as the offset.\n   * If undefined, starts from the beginning or end depending on queryOptions.order.\n   */\n  from?: number;\n\n  /**\n   * Results page size. Default is 50.\n   */\n  pageSize?: number;\n\n  /**\n   * Numeric order of results. Default is \"asc\".\n   */\n  order?: 'asc' | 'desc';\n\n  /**\n   * Query limit.\n   */\n  limit: number;\n}\n\nclass SyncListImpl extends SyncEntity {\n  private descriptor: SyncListDescriptor;\n  private updateMergingQueue: NamespacedMergingQueue<number, SyncListItemMetadata, SyncListItem>;\n  private cache: Cache<number, SyncListItem>;\n  private context: Object;\n  private contextEventId: number;\n\n  /**\n   * @private\n   */\n  constructor(services: SyncListServices, descriptor: SyncListDescriptor, removalHandler: RemovalHandler) {\n    super(services, removalHandler);\n\n    const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? {ttl: input.ttl}\n      : acc;\n    this.updateMergingQueue = new NamespacedMergingQueue<number, SyncListItemMetadata, SyncListItem>(updateRequestReducer);\n    this.cache = new Cache<number, SyncListItem>();\n    this.descriptor = descriptor;\n    this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n  }\n\n  // private props\n  get uri(): string {\n    return this.descriptor.url;\n  }\n\n  get revision(): string {\n    return this.descriptor.revision;\n  }\n\n  get lastEventId(): number {\n    return this.descriptor.last_event_id;\n  }\n\n  get links() {\n    return this.descriptor.links;\n  }\n\n  get dateExpires() {\n    return this.descriptor.date_expires;\n  }\n\n  static get type() {\n    return 'list';\n  }\n\n  get type() {\n    return 'list';\n  }\n\n  // below properties are specific to Insights only\n  get indexName(): string {\n    return undefined;\n  }\n\n  get queryString(): string {\n    return undefined;\n  }\n\n  // public props, documented along with class description\n  get sid(): string {\n    return this.descriptor.sid;\n  }\n\n  get uniqueName(): string {\n    return this.descriptor.unique_name || null;\n  }\n\n  get dateUpdated(): Date {\n    return this.descriptor.date_updated;\n  }\n\n  private async _addOrUpdateItemOnServer(url: string, data: Object, ifMatch: string, ttl: number) {\n    const requestBody: any = {data};\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    const response = await this.services.network.post(url, requestBody, ifMatch);\n    response.body.data = data;\n    response.body.date_updated = new Date(response.body.date_updated);\n\n    return response.body;\n  }\n\n  public async push(value, itemMetadata?: SyncListItemMetadata) {\n    let ttl = (itemMetadata || {}).ttl;\n    let item = await this._addOrUpdateItemOnServer(this.links.items, value, undefined, ttl);\n    let index = Number(item.index);\n    this._handleItemMutated(index, item.url, item.last_event_id, item.revision, value, item.date_updated, item.date_expires, true, false);\n    return this.cache.get(index);\n  }\n\n  public async set(index: number, value: Object, itemMetadataUpdates?: SyncListItemMetadata) {\n    const input: SyncListItemMetadata = itemMetadataUpdates || {};\n    return this.updateMergingQueue.squashAndAdd(index, input, (input) => this._updateItemUnconditionally(index, value, input.ttl));\n  }\n\n  private async _updateItemUnconditionally(index: number, data: Object, ttl?: number): Promise<SyncListItem> {\n    let existingItem = await this.get(index);\n    const itemDescriptor = await this._addOrUpdateItemOnServer(existingItem.uri, data, undefined, ttl);\n    this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision,\n      itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);\n    return this.cache.get(index);\n  }\n\n  private async _updateItemWithIfMatch(index: number, mutatorFunction: Mutator, ttl?: number): Promise<SyncListItem> {\n    const existingItem = await this.get(index);\n    const data = mutatorFunction(deepClone(existingItem.data));\n    if (data) {\n      const ifMatch = existingItem.revision;\n      try {\n        const itemDescriptor = await this._addOrUpdateItemOnServer(existingItem.uri, data, ifMatch, ttl);\n        this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision,\n          itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);\n        return this.cache.get(index);\n      } catch (error) {\n        if (error.status === 412) {\n          await this._getItemFromServer(index);\n          return this._updateItemWithIfMatch(index, mutatorFunction, ttl);\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      return existingItem;\n    }\n  }\n\n  public async mutate(index: number, mutator: Mutator, itemMetadataUpdates?: SyncListItemMetadata): Promise<SyncListItem> {\n    const input: SyncListItemMetadata = itemMetadataUpdates || {};\n    return this.updateMergingQueue.add(index, input, (input) => this._updateItemWithIfMatch(index, mutator, input.ttl));\n  }\n\n  public async update(index: number, obj: Object, itemMetadataUpdates?: SyncListItemMetadata): Promise<SyncListItem> {\n    return this.mutate(index, remote => Object.assign(remote, obj), itemMetadataUpdates);\n  }\n\n  public async remove(index: number): Promise<void> {\n    const item = await this.get(index);\n    const previousItemData = deepClone(item.data);\n    const response = await this.services.network.delete(item.uri);\n    this._handleItemRemoved(index, response.body.last_event_id, previousItemData, new Date(response.body.date_updated), false);\n  }\n\n  public async get(index: number): Promise<SyncListItem> {\n    let cachedItem = this.cache.get(index);\n    if (cachedItem) {\n      return cachedItem;\n    } else {\n      return this._getItemFromServer(index);\n    }\n  }\n\n  private async _getItemFromServer(index: number): Promise<SyncListItem> {\n    let result = await this.queryItems({index});\n    if (result.items.length < 1) {\n      throw new SyncError(`No item with index ${index} found`, 404, 54151);\n    } else {\n      return result.items[0];\n    }\n  }\n\n  /**\n   * Query items from the List\n   * @private\n   */\n  protected async queryItems(arg): Promise<Paginator<SyncListItem>> {\n    arg = arg || {};\n    const url = new UriBuilder(this.links.items)\n      .queryParam('From', arg.from)\n      .queryParam('PageSize', arg.limit)\n      .queryParam('Index', arg.index)\n      .queryParam('PageToken', arg.pageToken)\n      .queryParam('Order', arg.order)\n      .build();\n\n    let response = await this.services.network.get(url);\n    let items = response.body.items.map(el => {\n      el.date_updated = new Date(el.date_updated);\n      let itemInCache = this.cache.get(el.index);\n      if (itemInCache) {\n        this._handleItemMutated(el.index, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);\n      } else {\n        this.cache.store(Number(el.index), new SyncListItem({\n          index: Number(el.index),\n          uri: el.url,\n          revision: el.revision,\n          lastEventId: el.last_event_id,\n          dateUpdated: el.date_updated,\n          dateExpires: el.date_expires,\n          data: el.data\n        }), el.last_event_id);\n      }\n      return this.cache.get(el.index);\n    });\n    let meta = response.body.meta;\n    return new Paginator<SyncListItem>(items\n      , pageToken => this.queryItems({pageToken})\n      , meta.previous_token\n      , meta.next_token);\n  }\n\n  async getItems(args): Promise<Paginator<SyncListItem>> {\n    args = args || {};\n    validatePageSize(args.pageSize);\n    args.limit = args.pageSize || args.limit || 50;\n    args.order = args.order || 'asc';\n    return this.queryItems(args);\n  }\n\n  /**\n   * @return {Promise<Object>} Context of List\n   * @private\n   */\n  async getContext(): Promise<Object> {\n    if (!this.context) {\n      let response = await this.services.network.get(this.links.context);\n      // store fetched context if we have't received any newer update\n      this._updateContextIfRequired(response.body.data, response.body.last_event_id);\n    }\n    return this.context;\n  }\n\n  public async setTtl(ttl: number): Promise<void> {\n    try {\n      const requestBody = {ttl};\n      const response = await this.services.network.post(this.uri, requestBody);\n      this.descriptor.date_expires = response.body.date_expires;\n    } catch (error) {\n      if (error.status === 404) {\n        this.onRemoved(false);\n      }\n      throw error;\n    }\n  }\n\n  public async setItemTtl(index: number, ttl: number): Promise<void> {\n    let existingItem = await this.get(index);\n    const requestBody = {ttl};\n    const response = await this.services.network.post(existingItem.uri, requestBody);\n    existingItem.updateDateExpires(response.body.date_expires);\n  }\n\n  async removeList() {\n    await this.services.network.delete(this.uri);\n    this.onRemoved(true);\n  }\n\n  protected onRemoved(locally: boolean) {\n    this._unsubscribe();\n    this.removalHandler(this.type, this.sid, this.uniqueName);\n\n    this.broadcastEventToListeners('removed', {isLocal: locally});\n  }\n\n  private shouldIgnoreEvent(key: number, eventId: number) {\n    return this.cache.isKnown(key, eventId);\n  }\n\n  /**\n   * Handle update, which came from the server.\n   * @private\n   */\n  _update(update, isStrictlyOrdered: boolean): void {\n    const itemIndex = Number(update.item_index);\n    update.date_created = new Date(update.date_created);\n    switch (update.type) {\n      case 'list_item_added':\n      case 'list_item_updated': {\n        this._handleItemMutated(\n          itemIndex,\n          update.item_url,\n          update.id,\n          update.item_revision,\n          update.item_data,\n          update.date_created,\n          undefined, // orchestration does not include date_expires  -- @todo  it does now?\n          update.type === 'list_item_added',\n          true);\n      }\n        break;\n      case 'list_item_removed': {\n        this._handleItemRemoved(itemIndex, update.id, update.item_data, update.date_created, true);\n      }\n        break;\n      case 'list_context_updated': {\n        this._handleContextUpdate(update.context_data, update.id, update.date_created);\n      }\n        break;\n      case 'list_removed': {\n        this.onRemoved(false);\n      }\n        break;\n    }\n\n    if (isStrictlyOrdered) {\n      this._advanceLastEventId(update.id, update.list_revision);\n    }\n  }\n\n  _advanceLastEventId(eventId: number, revision?: string): void {\n    if (this.lastEventId < eventId) {\n      this.descriptor.last_event_id = eventId;\n      if (revision) {\n        this.descriptor.revision = revision;\n      }\n    }\n  }\n\n  private _updateRootDateUpdated(dateUpdated: Date) {\n    if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {\n      this.descriptor.date_updated = dateUpdated;\n      this.services.storage.update(this.type, this.sid, this.uniqueName, {date_updated: dateUpdated});\n    }\n  }\n\n  private _handleItemMutated(\n    index: number,\n    uri: string,\n    lastEventId: number,\n    revision: string,\n    data: Object,\n    dateUpdated: Date,\n    dateExpires: string,\n    added: boolean,\n    remote: boolean\n  ): void {\n    if (this.shouldIgnoreEvent(index, lastEventId)) {\n      log.trace(`Item ${index} update skipped, current: ${this.lastEventId}, remote: ${lastEventId}`);\n      return;\n    }\n\n    this._updateRootDateUpdated(dateUpdated);\n    const item = this.cache.get(index);\n\n    if (!item) {\n      const newItem = new SyncListItem({index, uri, lastEventId, revision, data, dateUpdated, dateExpires});\n\n      this.cache.store(index, newItem, lastEventId);\n      this.emitItemMutationEvent(newItem, remote, added);\n\n      return;\n    }\n\n    const previousItemData = deepClone(item.data);\n    item.update(lastEventId, revision, data, dateUpdated);\n    this.cache.store(index, item, lastEventId);\n\n    if (dateExpires !== undefined) {\n      item.updateDateExpires(dateExpires);\n    }\n\n    this.emitItemMutationEvent(item, remote, false, previousItemData);\n  }\n\n  /**\n   * @private\n   */\n  private emitItemMutationEvent(item: SyncListItem, remote: boolean, added: boolean, previousItemData: null | Object = null): void {\n    const eventName = added ? 'itemAdded' : 'itemUpdated';\n    const args: any = {item, isLocal: !remote};\n\n    if (!added) {\n      args.previousItemData = previousItemData;\n    }\n\n    this.broadcastEventToListeners(eventName, args);\n  }\n\n  /**\n   * @private\n   */\n  private _handleItemRemoved(index: number, eventId: number, oldData: Object, dateUpdated: Date, remote: boolean): void {\n    this._updateRootDateUpdated(dateUpdated);\n    this.cache.delete(index, eventId);\n    this.broadcastEventToListeners('itemRemoved', {index: index, isLocal: !remote, previousItemData: oldData});\n  }\n\n  /**\n   * @private\n   */\n  private _handleContextUpdate(data: Object, eventId: number, dateUpdated: Date): void {\n    this._updateRootDateUpdated(dateUpdated);\n    if (this._updateContextIfRequired(data, eventId)) {\n      this.broadcastEventToListeners('contextUpdated', {context: data, isLocal: false});\n    }\n  }\n\n  /**\n   * @private\n   */\n  private _updateContextIfRequired(data: Object, eventId: number): boolean {\n    if (!this.contextEventId || eventId > this.contextEventId) {\n      this.context = data;\n      this.contextEventId = eventId;\n      return true;\n    } else {\n      log.trace('Context update skipped, current:', this.lastEventId, ', remote:', eventId);\n      return false;\n    }\n  }\n}\n\n/**\n * Represents a Sync list, which stores an ordered list of values.\n * Use the {@link SyncClient.list} method to obtain a reference to a Sync list.\n * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).\n */\nclass SyncList extends Closeable {\n  private readonly syncListImpl: SyncListImpl;\n\n  // private props\n  get uri(): string {\n    return this.syncListImpl.uri;\n  }\n\n  get revision(): string {\n    return this.syncListImpl.revision;\n  }\n\n  get lastEventId(): number {\n    return this.syncListImpl.lastEventId;\n  }\n\n  get links() {\n    return this.syncListImpl.links;\n  }\n\n  get dateExpires() {\n    return this.syncListImpl.dateExpires;\n  }\n\n  static get type() {\n    return SyncListImpl.type;\n  }\n\n  get type() {\n    return SyncListImpl.type;\n  }\n\n  /**\n   * Unique ID of the list, immutable identifier assigned by the system.\n   */\n  get sid(): string {\n    return this.syncListImpl.sid;\n  }\n\n  /**\n   * Unique name of the list, immutable identifier that can be assigned to the list during creation.\n   */\n  get uniqueName(): string {\n    return this.syncListImpl.uniqueName;\n  }\n\n  /**\n   * Date when the list was last updated, given in UTC ISO 8601 format (e.g., '2018-04-26T15:23:19.732Z').\n   */\n  get dateUpdated(): Date {\n    return this.syncListImpl.dateUpdated;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(syncListImpl: SyncListImpl) {\n    super();\n    this.syncListImpl = syncListImpl;\n    this.syncListImpl.attach(this);\n  }\n\n  /**\n   * Fired when a new item appears in the list, regardless of whether its creator was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * {@link SyncListItem} `item` - added item\n   *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * list.on('itemAdded', (args) => {\n   *   console.log(`List item ${args.item.index} was added`);\n   *   console.log('args.item.data:', args.item.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemAdded = 'itemAdded';\n\n  /**\n   * Fired when a list item is updated (not added or removed, but changed), regardless of whether the updater was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * {@link SyncListItem} `item` - updated item\n   *     * boolean `isLocal` - equals true if the item was updated by a local actor, false otherwise\n   *     * object `previousItemData` - contains a snapshot of the item data before the update\n   * @example\n   * ```typescript\n   * list.on('itemUpdated', (args) => {\n   *   console.log(`List item ${args.item.index} was updated`);\n   *   console.log('args.item.data:', args.item.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   *   console.log('args.previousItemData:', args.previousItemData);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemUpdated = 'itemUpdated';\n\n  /**\n   * Fired when a list item is removed, regardless of whether the remover was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * number `index` - index of the removed item\n   *     * boolean `isLocal` - equals true if the item was removed by a local actor, false otherwise\n   *     * object `previousItemData` - contains a snapshot of the item data before the removal\n   * @example\n   * ```typescript\n   * list.on('itemRemoved', (args) => {\n   *   console.log(`List item ${args.index} was removed`);\n   *   console.log('args.previousItemData:', args.previousItemData);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemRemoved = 'itemRemoved';\n\n  /**\n   * Fired when a list is deleted entirely, by any actor local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * boolean `isLocal` - equals true if the list was removed by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * list.on('removed', (args) => {\n   *   console.log(`List ${list.sid} was removed`);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Add a new item to the list.\n   * @param data Data to be added.\n   * @param itemMetadata Item metadata.\n   * @return The newly added item.\n   * @example\n   * ```typescript\n   * list.push({ name: 'John Smith' }, { ttl: 86400 })\n   *   .then((item) => {\n   *     console.log(`List Item push() successful, item index: ${item.index}, data:`, item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item push() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    pureObject,\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n\n  public async push(data, itemMetadata?: SyncListItemMetadata): Promise<SyncListItem> {\n    this.ensureNotClosed();\n    return this.syncListImpl.push(data, itemMetadata);\n  }\n\n  /**\n   * Assign new data to an existing item, given its index.\n   * @param index Index of the item to be updated.\n   * @param value New data to be assigned to an item.\n   * @param itemMetadataUpdates New item metadata.\n   * @return A promise with the updated item containing latest known data.\n   * The promise will be rejected if the item does not exist.\n   * @example\n   * ```typescript\n   * list.set(42, { name: 'John Smith' }, { ttl: 86400 })\n   *   .then((item) => {\n   *     console.log('List Item set() successful, item data:', item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item set() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    nonNegativeInteger,\n    pureObject,\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n\n  public async set(index: number, value: Object, itemMetadataUpdates?: SyncListItemMetadata): Promise<SyncListItem> {\n    this.ensureNotClosed();\n    return this.syncListImpl.set(index, value, itemMetadataUpdates);\n  }\n\n  /**\n   * Modify an existing item by applying a mutation function to it.\n   * @param index Index of the item to be changed.\n   * @param mutator A function that outputs a new data based on the existing data.\n   * @param itemMetadataUpdates New item metadata.\n   * @return Resolves with the most recent item state, the output of a successful\n   * mutation or a state that prompted graceful cancellation (mutator returned `null`). This promise\n   * will be rejected if the indicated item does not already exist.\n   * @example\n   * ```typescript\n   * const mutatorFunction = (currentValue) => {\n   *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;\n   *     return currentValue;\n   * };\n   * list.mutate(42, mutatorFunction, { ttl: 86400 })\n   *   .then((item) => {\n   *     console.log('List Item mutate() successful, new data:', item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item mutate() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    nonNegativeInteger,\n    'function',\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n\n  public async mutate(index: number, mutator: Mutator, itemMetadataUpdates?: SyncListItemMetadata): Promise<SyncListItem> {\n    this.ensureNotClosed();\n    return this.syncListImpl.mutate(index, mutator, itemMetadataUpdates);\n  }\n\n  /**\n   * Modify an existing item by appending new fields (or overwriting existing ones) with the values from the object.\n   * This is equivalent to\n   * ```typescript\n   * list.mutate(42, (currentValue) => Object.assign(currentValue, obj));\n   * ```\n   * @param index Index of an item to be changed.\n   * @param obj Set of fields to update.\n   * @param itemMetadataUpdates New item metadata.\n   * @return A promise with a modified item containing latest known data.\n   * The promise will be rejected if the item was not found.\n   * @example\n   * ```typescript\n   * // Say, the List Item (index: 42) data is `{ name: 'John Smith' }`\n   * list.update(42, { age: 34 }, { ttl: 86400 })\n   *   .then((item) => {\n   *     // Now the List Item data is `{ name: 'John Smith', age: 34 }`\n   *     console.log('List Item update() successful, new data:', item.data);\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item update() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    nonNegativeInteger,\n    pureObject,\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async update(index: number, obj: Object, itemMetadataUpdates?: SyncListItemMetadata): Promise<SyncListItem> {\n    this.ensureNotClosed();\n    return this.syncListImpl.update(index, obj, itemMetadataUpdates);\n  }\n\n  /**\n   * Delete an item given its index.\n   * @param index Index of the item to be removed.\n   * @return A promise to remove the item.\n   * The promise will be rejected if the item was not found.\n   * @example\n   * ```typescript\n   * list.remove(42)\n   *   .then(() => {\n   *     console.log('List Item remove() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item remove() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async remove(index: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncListImpl.remove(index);\n  }\n\n  /**\n   * Retrieve an item by List index.\n   * @param index Item index in the list.\n   * @return A promise with the item containing latest known data.\n   * The promise will be rejected if the item was not found.\n   * @example\n   * ```typescript\n   * list.get(42)\n   *   .then((item) => {\n   *     console.log('List Item get() successful, item data:', item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item get() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async get(index: number): Promise<SyncListItem> {\n    this.ensureNotClosed();\n    return this.syncListImpl.get(index);\n  }\n\n  /**\n   * Retrieve a list context\n   * @return A promise with the list's context\n   * @internal\n   */\n  public async getContext(): Promise<Object> {\n    this.ensureNotClosed();\n    return this.syncListImpl.getContext();\n  }\n\n  /**\n   * Query a list of items from collection.\n   * Information about the query limits can be found {@link https://www.twilio.com/docs/sync/limits|here}.\n   * @param queryOptions Query options.\n   * @example\n   * ```typescript\n   * const pageHandler = (paginator) => {\n   *   paginator.items.forEach((item) => {\n   *     console.log(`Item ${item.index}:`, item.data);\n   *   });\n   *   return paginator.hasNextPage\n   *     ? paginator.nextPage().then(pageHandler)\n   *     : null;\n   * };\n   * list.getItems({ from: 0, order: 'asc' })\n   *   .then(pageHandler)\n   *   .catch((error) => {\n   *     console.error('List getItems() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('query options', {\n      from: [nonNegativeInteger, 'undefined'],\n      pageSize: [custom((value) => [isPositiveInteger(value), 'a positive integer']), 'undefined']\n    })\n  ])\n  async getItems(queryOptions: SyncListItemQueryOptions): Promise<Paginator<SyncListItem>> {\n    this.ensureNotClosed();\n    return this.syncListImpl.getItems(queryOptions);\n  }\n\n  /**\n   * Update the time-to-live of the list.\n   * @param ttl Specifies the TTL in seconds after which the list is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * list.setTtl(3600)\n   *   .then(() => {\n   *     console.log('List setTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('List setTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async setTtl(ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncListImpl.setTtl(ttl);\n  }\n\n  /**\n   * Update the time-to-live of a list item.\n   * @param index Item index.\n   * @param ttl Specifies the TTL in seconds after which the list item is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * list.setItemTtl(42, 86400)\n   *   .then(() => {\n   *     console.log('List setItemTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('List setItemTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger, nonNegativeInteger)\n  public async setItemTtl(index: number, ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncListImpl.setItemTtl(index, ttl);\n  }\n\n  /**\n   * Delete this list. It will be impossible to restore it.\n   * @return A promise that resolves when the list has been deleted.\n   * @example\n   * list.removeList()\n   *   .then(() => {\n   *     console.log('List removeList() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('List removeList() failed', error);\n   *   });\n   */\n  async removeList(): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncListImpl.removeList();\n  }\n\n  /**\n   * Conclude work with the list instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this list will continue operating and receiving events normally.\n   * @example\n   * ```typescript\n   * list.close();\n   * ```\n   */\n  public close(): void {\n    super.close();\n    this.syncListImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexport { SyncListItemMetadata, SyncListItemQueryOptions, SyncListServices, SyncListDescriptor, Mutator, SyncList, SyncListImpl };\nexport default SyncList;\n","export interface SyncMapItemDescriptor {\n  key: string;\n  url: string;\n  revision: string;\n  last_event_id: number;\n  date_updated: Date;\n  date_expires: string;\n  data: Object;\n}\n\n/**\n * Represents an individual element in a Sync map.\n */\nclass SyncMapItem {\n  private readonly descriptor: SyncMapItemDescriptor;\n\n  /**\n   * @internal\n   */\n  constructor(descriptor: SyncMapItemDescriptor) {\n    this.descriptor = descriptor;\n  }\n\n  get uri(): string {\n    return this.descriptor.url;\n  }\n\n  get revision(): string {\n    return this.descriptor.revision;\n  }\n\n  get lastEventId(): number {\n    return this.descriptor.last_event_id;\n  }\n\n  get dateExpires(): string {\n    return this.descriptor.date_expires;\n  }\n\n  /**\n   * The identifier that maps to this item within the containing Map.\n   */\n  get key(): string {\n    return this.descriptor.key;\n  }\n\n  /**\n   * The contents of the item.\n   */\n  get data(): Object {\n    return this.descriptor.data;\n  }\n\n  /**\n   * Date when the map item was last updated.\n   */\n  get dateUpdated(): Date {\n    return this.descriptor.date_updated;\n  }\n\n  /**\n   * @internal\n   */\n  update(eventId: number, revision: string, value: Object, dateUpdated: Date): SyncMapItem {\n    this.descriptor.last_event_id = eventId;\n    this.descriptor.revision = revision;\n    this.descriptor.data = value;\n    this.descriptor.date_updated = dateUpdated;\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  updateDateExpires(dateExpires: string) {\n    this.descriptor.date_expires = dateExpires;\n  }\n}\n\nexport { SyncMapItem };\n","import { deepClone, isPositiveInteger, validatePageSize } from './utils/sanitize';\nimport { UriBuilder } from './utils/uri';\nimport { SyncError } from './utils/syncerror';\nimport log from './utils/logger';\n\nimport { SyncEntity, EntityServices, RemovalHandler } from './entity';\nimport { SyncMapItemDescriptor, SyncMapItem } from './syncmapitem';\nimport { Paginator } from './paginator';\nimport { Cache } from './cache';\n\nimport { Mutator } from './interfaces/mutator';\nimport { NamespacedMergingQueue } from './mergingqueue';\nimport { Closeable } from './closeable';\nimport { validateTypesAsync, nonNegativeInteger, pureObject, objectSchema, custom } from '@twilio/declarative-type-validator';\n\nexport interface SyncMapServices extends EntityServices {\n}\n\nexport interface SyncMapDescriptor {\n  sid: string;\n  url: string;\n  revision: string;\n  last_event_id: number;\n  links: any;\n  unique_name: string;\n  date_updated: Date;\n  date_expires: string;\n\n  items?: SyncMapItemDescriptor[];\n}\n\ninterface PutItemResult {\n  item: SyncMapItemDescriptor;\n  added: boolean;\n}\n\n/**\n * Map item metadata.\n */\ninterface SyncMapItemMetadata {\n  /**\n   * Specifies the time-to-live in seconds after which the map item is subject to automatic deletion.\n   * The value 0 means infinity.\n   */\n  ttl?: number;\n}\n\n/**\n * Map item query options.\n */\ninterface SyncMapItemQueryOptions {\n  /**\n   * SyncMapItem key, which should be used as the offset. If undefined, starts from the beginning or end depending\n   * on queryOptions.order.\n   */\n  from?: string;\n\n  /**\n   * Result page size.\n   */\n  pageSize?: number | string;\n\n  /**\n   * Lexicographical order of results.\n   */\n  order?: 'asc' | 'desc';\n\n  limit?: number;\n}\n\nclass SyncMapImpl extends SyncEntity {\n  private readonly descriptor: SyncMapDescriptor;\n  private readonly updateMergingQueue: NamespacedMergingQueue<string, SyncMapItemMetadata, SyncMapItem>;\n  private readonly cache: Cache<string, SyncMapItem>;\n\n  /**\n   * @private\n   */\n  constructor(services: SyncMapServices, descriptor: SyncMapDescriptor, removalHandler: RemovalHandler) {\n    super(services, removalHandler);\n    const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? {ttl: input.ttl}\n      : acc;\n    this.updateMergingQueue = new NamespacedMergingQueue<string, SyncMapItemMetadata, SyncMapItem>(updateRequestReducer);\n    this.cache = new Cache<string, SyncMapItem>();\n    this.descriptor = descriptor;\n    this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n\n    if (descriptor.items) {\n      descriptor.items.forEach(itemDescriptor => {\n        itemDescriptor.date_updated = new Date(itemDescriptor.date_updated);\n        this.cache.store(itemDescriptor.key, new SyncMapItem(itemDescriptor), itemDescriptor.last_event_id);\n      });\n    }\n  }\n\n  // private props\n  get uri(): string {\n    return this.descriptor.url;\n  }\n\n  get links(): any {\n    return this.descriptor.links;\n  }\n\n  get revision(): string {\n    return this.descriptor.revision;\n  }\n\n  get lastEventId(): number {\n    return this.descriptor.last_event_id;\n  }\n\n  get dateExpires(): string {\n    return this.descriptor.date_expires;\n  }\n\n  static get type() {\n    return 'map';\n  }\n\n  get type() {\n    return 'map';\n  }\n\n  // below properties are specific to Insights only\n  get indexName(): string {\n    return undefined;\n  }\n\n  get queryString(): string {\n    return undefined;\n  }\n\n  // public props, documented along with class description\n  get sid() {\n    return this.descriptor.sid;\n  }\n\n  get uniqueName() {\n    return this.descriptor.unique_name || null;\n  }\n\n  get dateUpdated(): Date {\n    return this.descriptor.date_updated;\n  }\n\n  public async set(key: string, value: Object, itemMetadataUpdates?: SyncMapItemMetadata) {\n    const input: SyncMapItemMetadata = itemMetadataUpdates || {};\n    return this.updateMergingQueue.squashAndAdd(key, input, (input) => this._putItemUnconditionally(key, value, input.ttl));\n  }\n\n  public async get(key: string): Promise<SyncMapItem> {\n    if (key === null || key === undefined) {\n      throw new SyncError('SyncMapItem key may not be empty', 400, 54209);\n    }\n\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    } else {\n      return this._getItemFromServer(key);\n    }\n  }\n\n  private async _getItemFromServer(key: string): Promise<SyncMapItem> {\n    let result = await this.queryItems({key: key});\n    if (result.items.length < 1) {\n      throw new SyncError(`The specified Map Item does not exist`, 404, 54201);\n    } else {\n      return result.items[0];\n    }\n  }\n\n  public async mutate(key: string, mutator: Mutator, itemMetadataUpdates?: SyncMapItemMetadata): Promise<SyncMapItem> {\n    const input: SyncMapItemMetadata = itemMetadataUpdates || {};\n    return this.updateMergingQueue.add(key, input, (input) => this._putItemWithIfMatch(key, mutator, input.ttl));\n  }\n\n  public async update(key: string, obj: Object, itemMetadataUpdates?: SyncMapItemMetadata): Promise<SyncMapItem> {\n    return this.mutate(key, remote => Object.assign(remote, obj), itemMetadataUpdates);\n  }\n\n  private async _putItemUnconditionally(key: string, data: Object, ttl: number): Promise<SyncMapItem> {\n    const result: PutItemResult = await this._putItemToServer(key, data, undefined, ttl);\n    const item = result.item;\n    this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data,\n      item.date_updated, item.date_expires, result.added, false);\n    return this.cache.get(item.key);\n  }\n\n  private async _putItemWithIfMatch(key: string, mutatorFunction: Mutator, ttl: number): Promise<SyncMapItem> {\n    const currentItem = await this.get(key)\n      .catch(error => {\n        if (error.status === 404) {\n          // PUT /Items/myKey with `If-Match: -1` acts as \"put if not exists\"\n          return new SyncMapItem({key: key, data: {}, last_event_id: -1, revision: '-1', url: null, date_updated: null, date_expires: null});\n        } else {\n          throw error;\n        }\n      });\n    let data = mutatorFunction(deepClone(currentItem.data));\n    if (data) {\n      let ifMatch = currentItem.revision;\n      try {\n        const result: PutItemResult = await this._putItemToServer(key, data, ifMatch, ttl);\n        const item = result.item;\n        this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data,\n          item.date_updated, item.date_expires, result.added, false);\n        return this.cache.get(item.key);\n      } catch (error) {\n        if (error.status === 412) {\n          await this._getItemFromServer(key);\n          return this._putItemWithIfMatch(key, mutatorFunction, ttl);\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      return currentItem;\n    }\n  }\n\n  private async _putItemToServer(key: string, data: Object, ifMatch: string, ttl: number): Promise<PutItemResult> {\n    const url = new UriBuilder(this.links.items).pathSegment(key).build();\n    const requestBody: any = {data};\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    try {\n      const response = await this.services.network.put(url, requestBody, ifMatch);\n      const mapItemDescriptor = response.body;\n      mapItemDescriptor.data = data; // The server does not return the data in the response\n      mapItemDescriptor.date_updated = new Date(mapItemDescriptor.date_updated);\n      const added = response.status.code === 201;\n      return {added, item: mapItemDescriptor};\n    } catch (error) {\n      if (error.status === 404) {\n        this.onRemoved(false);\n      }\n      throw error;\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    const item = await this.get(key);\n    const previousItemData = deepClone(item.data);\n    const response = await this.services.network.delete(item.uri);\n    this._handleItemRemoved(key, response.body.last_event_id, previousItemData, new Date(response.body.date_updated), false);\n  }\n\n  /**\n   * @private\n   */\n  protected async queryItems(args?): Promise<Paginator<SyncMapItem>> {\n    args = args || {};\n    const uri = new UriBuilder(this.links.items)\n      .queryParam('From', args.from)\n      .queryParam('PageSize', args.limit)\n      .queryParam('Key', args.key)\n      .queryParam('PageToken', args.pageToken)\n      .queryParam('Order', args.order)\n      .build();\n\n    let response = await this.services.network.get(uri);\n    let items = response.body.items.map(el => {\n      el.date_updated = new Date(el.date_updated);\n      let itemInCache = this.cache.get(el.key);\n      if (itemInCache) {\n        this._handleItemMutated(el.key, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);\n      } else {\n        this.cache.store(el.key, new SyncMapItem(el), el.last_event_id);\n      }\n      return this.cache.get(el.key);\n    });\n    const meta = response.body.meta;\n    return new Paginator<SyncMapItem>(items\n      , pageToken => this.queryItems({pageToken})\n      , meta.previous_token\n      , meta.next_token);\n  }\n\n  async getItems(args?: any): Promise<Paginator<SyncMapItem>> {\n    args = args || {};\n    validatePageSize(args.pageSize);\n    args.limit = args.pageSize || args.limit || 50;\n    args.order = args.order || 'asc';\n    return this.queryItems(args);\n  }\n\n  private shouldIgnoreEvent(key: string, eventId: number) {\n    return this.cache.isKnown(key, eventId);\n  }\n\n  /**\n   * Handle update from the server\n   * @private\n   */\n  _update(update, isStrictlyOrdered: boolean): void {\n    update.date_created = new Date(update.date_created);\n    switch (update.type) {\n      case 'map_item_added':\n      case 'map_item_updated': {\n        this._handleItemMutated(\n          update.item_key,\n          update.item_url,\n          update.id,\n          update.item_revision,\n          update.item_data,\n          update.date_created,\n          undefined, // orchestration events do not include date_expires\n          update.type === 'map_item_added',\n          true);\n      }\n        break;\n      case 'map_item_removed': {\n        this._handleItemRemoved(update.item_key, update.id, update.item_data, update.date_created, true);\n      }\n        break;\n      case 'map_removed': {\n        this.onRemoved(false);\n      }\n        break;\n    }\n\n    if (isStrictlyOrdered) {\n      this._advanceLastEventId(update.id, update.map_revision);\n    }\n  }\n\n  _advanceLastEventId(eventId: number, revision?: string): void {\n    if (this.lastEventId < eventId) {\n      this.descriptor.last_event_id = eventId;\n      if (revision) {\n        this.descriptor.revision = revision;\n      }\n    }\n  }\n\n  private _updateRootDateUpdated(dateUpdated: Date) {\n    if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {\n      this.descriptor.date_updated = dateUpdated;\n      this.services.storage.update(this.type, this.sid, this.uniqueName, {date_updated: dateUpdated});\n    }\n  }\n\n  private _handleItemMutated(\n    key: string,\n    url: string,\n    lastEventId: number,\n    revision: string,\n    data: Object,\n    dateUpdated: Date,\n    dateExpires: string,\n    added: boolean,\n    remote: boolean\n  ): void {\n    if (this.shouldIgnoreEvent(key, lastEventId)) {\n      log.trace('SyncMapItem ', key, ' update skipped, current:', this.lastEventId, ', remote:', lastEventId);\n      return;\n    }\n\n    this._updateRootDateUpdated(dateUpdated);\n    const item = this.cache.get(key);\n\n    if (!item) {\n      const newItem = new SyncMapItem({\n        key: key,\n        url,\n        last_event_id: lastEventId,\n        revision,\n        data,\n        date_updated: dateUpdated,\n        date_expires: dateExpires,\n      });\n\n      this.cache.store(key, newItem, lastEventId);\n      this.emitItemMutationEvent(newItem, remote, added);\n\n      return;\n    }\n\n    const previousItemData = deepClone(item.data);\n    item.update(lastEventId, revision, data, dateUpdated);\n    this.cache.store(key, item, lastEventId);\n\n    if (dateExpires !== undefined) {\n      item.updateDateExpires(dateExpires);\n    }\n\n    this.emitItemMutationEvent(item, remote, false, previousItemData);\n  }\n\n  private emitItemMutationEvent(item: SyncMapItem, remote: boolean, added: boolean, previousItemData: null | Object = null): void {\n    const eventName = added ? 'itemAdded' : 'itemUpdated';\n    const args: any = { item, isLocal: !remote };\n\n    if (!added) {\n      args.previousItemData = previousItemData;\n    }\n\n    this.broadcastEventToListeners(eventName, args);\n  }\n\n  /**\n   * @private\n   */\n  protected _handleItemRemoved(key, eventId, oldData, dateUpdated: Date, remote: boolean) {\n    this._updateRootDateUpdated(dateUpdated);\n    this.cache.delete(key, eventId);\n    this.broadcastEventToListeners('itemRemoved', {key: key, isLocal: !remote, previousItemData: oldData});\n  }\n\n  protected onRemoved(locally: boolean) {\n    this._unsubscribe();\n    this.removalHandler(this.type, this.sid, this.uniqueName);\n    this.broadcastEventToListeners('removed', {isLocal: locally});\n  }\n\n  public async setTtl(ttl: number): Promise<void> {\n    try {\n      const requestBody = {ttl};\n      const response = await this.services.network.post(this.uri, requestBody);\n      this.descriptor.date_expires = response.body.date_expires;\n    } catch (error) {\n      if (error.status === 404) {\n        this.onRemoved(false);\n      }\n      throw error;\n    }\n  }\n\n  public async setItemTtl(key: string, ttl: number): Promise<void> {\n    let existingItem = await this.get(key);\n    const requestBody = {ttl};\n    const response = await this.services.network.post(existingItem.uri, requestBody);\n    existingItem.updateDateExpires(response.body.date_expires);\n  }\n\n  async removeMap() {\n    await this.services.network.delete(this.uri);\n    this.onRemoved(true);\n  }\n}\n\n/**\n * Represents a Sync map, which is a data structure that stores an unordered set of key-value pairs.\n * Use the {@link SyncClient.map} method to obtain a reference to a Sync map.\n * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).\n */\nclass SyncMap extends Closeable {\n  private readonly syncMapImpl: SyncMapImpl;\n\n  // private props\n  get uri(): string {\n    return this.syncMapImpl.uri;\n  }\n\n  get links(): any {\n    return this.syncMapImpl.links;\n  }\n\n  get revision(): string {\n    return this.syncMapImpl.revision;\n  }\n\n  get lastEventId(): number {\n    return this.syncMapImpl.lastEventId;\n  }\n\n  get dateExpires(): string {\n    return this.syncMapImpl.dateExpires;\n  }\n\n  static get type() {\n    return SyncMapImpl.type;\n  }\n\n  get type() {\n    return SyncMapImpl.type;\n  }\n\n  /**\n   * An immutable identifier (a SID) assigned by the system on creation.\n   */\n  get sid() {\n    return this.syncMapImpl.sid;\n  }\n\n  /**\n   * An optional immutable identifier that may be assigned by the\n   * programmer to this map on creation. Unique among other Maps.\n   */\n  get uniqueName() {\n    return this.syncMapImpl.uniqueName;\n  }\n\n  /**\n   * Date when the map was last updated.\n   */\n  get dateUpdated(): Date {\n    return this.syncMapImpl.dateUpdated;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(syncMapImpl: SyncMapImpl) {\n    super();\n    this.syncMapImpl = syncMapImpl;\n    this.syncMapImpl.attach(this);\n  }\n\n  /**\n   * Fired when a new item appears in the map, regardless of whether its creator was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * {@link SyncMapItem} `item` - added item\n   *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * map.on('itemAdded', (args) => {\n   *   console.log(`Map item ${args.item.key} was added`);\n   *   console.log('args.item.data:', args.item.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemAdded = 'itemAdded';\n\n  /**\n   * Fired when a map item is updated (not added or removed, but changed), regardless of whether the updater was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * {@link SyncMapItem} `item` - updated item\n   *     * boolean `isLocal` - equals true if the item was updated by a local actor, false otherwise\n   *     * object `previousItemData` - contains a snapshot of the item data before the update\n   * @example\n   * ```typescript\n   * map.on('itemUpdated', (args) => {\n   *   console.log(`Map item ${args.item.key} was updated`);\n   *   console.log('args.item.data:', args.item.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   *   console.log('args.previousItemData:', args.previousItemData);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemUpdated = 'itemUpdated';\n\n  /**\n   * Fired when a map item is removed, regardless of whether the remover was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * string `key` - the key of the removed item\n   *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise\n   *     * object `previousItemData` - contains a snapshot of the item data before removal\n   * @example\n   * ```typescript\n   * map.on('itemRemoved', (args) => {\n   *   console.log(`Map item ${args.key} was removed`);\n   *   console.log('args.previousItemData:', args.previousItemData);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemRemoved = 'itemRemoved';\n\n  /**\n   * Fired when a map is deleted entirely, by any actor local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * boolean `isLocal` - equals true if the map was removed by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * map.on('removed', (args) => {\n   *   console.log(`Map ${map.sid} was removed`);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Add a new item to the map with the given key-value pair. Overwrites any data that might already exist with that key.\n   * @param key Unique item identifier.\n   * @param data Data to be set.\n   * @param itemMetadataUpdates New item metadata.\n   * @return Newly added item, or modified one if already exists, with the latest known data.\n   * @example\n   * ```typescript\n   * map.set('myKey', { name: 'John Smith' }, { ttl: 86400 })\n   *   .then((item) => {\n   *     console.log('Map SyncMapItem set() successful, item data:', item.data);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map SyncMapItem set() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    'string',\n    pureObject,\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async set(key: string, data: Object, itemMetadataUpdates?: SyncMapItemMetadata) {\n    this.ensureNotClosed();\n    return this.syncMapImpl.set(key, data, itemMetadataUpdates);\n  }\n\n  /**\n   * Retrieve an item by key.\n   * @param key Identifies the desired item.\n   * @return A promise that resolves when the item has been fetched.\n   * This promise will be rejected if item was not found.\n   * @example\n   * ```typescript\n   * map.get('myKey')\n   *   .then((item) => {\n   *     console.log('Map SyncMapItem get() successful, item data:', item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map SyncMapItem get() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync('string')\n  public async get(key: string): Promise<SyncMapItem> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.get(key);\n  }\n\n  /**\n   * Schedules a modification to this Map SyncMapItem that will apply a mutation function.\n   * If no SyncMapItem with the given key exists, it will first be created, having the default data (`{}`).\n   * @param key Selects the map item to be mutated.\n   * @param mutator A function that outputs a new data based on the existing data.\n   * May be called multiple times, particularly if this Map SyncMapItem is modified concurrently by remote code.\n   * If the mutation ultimately succeeds, the Map SyncMapItem will have made the particular transition described\n   * by this function.\n   * @param itemMetadataUpdates New item metadata.\n   * @return Resolves with the most recent item state, the output of a successful\n   * mutation or a state that prompted graceful cancellation (mutator returned `null`).\n   * @example\n   * ```typescript\n   * const mutatorFunction = (currentData) => {\n   *     currentData.viewCount = (currentData.viewCount || 0) + 1;\n   *     return currentData;\n   * };\n   * map.mutate('myKey', mutatorFunction, { ttl: 86400 })\n   *   .then((item) => {\n   *     console.log('Map SyncMapItem mutate() successful, new data:', item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map SyncMapItem mutate() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    'string',\n    'function',\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async mutate(key: string, mutator: Mutator, itemMetadataUpdates?: SyncMapItemMetadata): Promise<SyncMapItem> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.mutate(key, mutator, itemMetadataUpdates);\n  }\n\n  /**\n   * Modify a map item by appending new fields (or by overwriting existing ones) with the values from\n   * the provided Object. Creates a new item if no item by this key exists, copying all given fields and values\n   * into it.\n   * This is equivalent to\n   * ```typescript\n   * map.mutate('myKey', (currentData) => Object.assign(currentData, obj));\n   * ```\n   * @param key Selects the map item to update.\n   * @param obj Specifies the particular (top-level) attributes that will receive new values.\n   * @param itemMetadataUpdates New item metadata.\n   * @return A promise resolving to the modified item in its new state.\n   * @example\n   * ```typescript\n   * // Say, the Map SyncMapItem (key: `'myKey'`) data is `{ name: 'John Smith' }`\n   * map.update('myKey', { age: 34 }, { ttl: 86400 })\n   *   .then((item) => {\n   *     // Now the Map SyncMapItem data is `{ name: 'John Smith', age: 34 }`\n   *     console.log('Map SyncMapItem update() successful, new data:', item.data);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map SyncMapItem update() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    'string',\n    pureObject,\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async update(key: string, obj: Object, itemMetadataUpdates?: SyncMapItemMetadata): Promise<SyncMapItem> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.update(key, obj, itemMetadataUpdates);\n  }\n\n  /**\n   * Delete an item, given its key.\n   * @param key Selects the item to delete.\n   * @return A promise to remove an item.\n   * The promise will be rejected if 'key' is undefined or an item was not found.\n   * @example\n   * ```typescript\n   * map.remove('myKey')\n   *   .then(() => {\n   *     console.log('Map SyncMapItem remove() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map SyncMapItem remove() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync('string')\n  async remove(key: string): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.remove(key);\n  }\n\n  /**\n   * Get a complete list of items from the map.\n   * Information about the query limits can be found [here](https://www.twilio.com/docs/sync/limits).\n   * @param queryOptions Query options.\n   * @example\n   * ```typescript\n   * const pageHandler = (paginator) => {\n   *   paginator.items.forEach((item) => {\n   *     console.log(`SyncMapItem ${item.key}: `, item.data);\n   *   });\n   *   return paginator.hasNextPage\n   *     ? paginator.nextPage().then(pageHandler)\n   *     : null;\n   * };\n   * map.getItems({ from: 'myKey', order: 'asc' })\n   *   .then(pageHandler)\n   *   .catch((error) => {\n   *     console.error('Map getItems() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('query options', {\n      from: ['string', 'undefined'],\n      pageSize: [custom((value) => [isPositiveInteger(value), 'a positive integer']), 'undefined']\n    })\n  ])\n  async getItems(queryOptions?: SyncMapItemQueryOptions): Promise<Paginator<SyncMapItem>> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.getItems(queryOptions);\n  }\n\n  /**\n   * Update the time-to-live of the map.\n   * @param ttl Specifies the TTL in seconds after which the map is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * map.setTtl(3600)\n   *   .then(() => {\n   *     console.log('Map setTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map setTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async setTtl(ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.setTtl(ttl);\n  }\n\n  /**\n   * Update the time-to-live of a map item.\n   * @param key SyncMapItem key.\n   * @param ttl Specifies the TTL in seconds after which the map item is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * map.setItemTtl('myKey', 86400)\n   *   .then(() => {\n   *     console.log('Map setItemTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map setItemTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync('string', nonNegativeInteger)\n  public async setItemTtl(key: string, ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.setItemTtl(key, ttl);\n  }\n\n  /**\n   * Delete this map. It will be impossible to restore it.\n   * @return A promise that resolves when the map has been deleted.\n   * @example\n   * ```typescript\n   * map.removeMap()\n   *   .then(() => {\n   *     console.log('Map removeMap() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map removeMap() failed', error);\n   *   });\n   * ```\n   */\n  async removeMap() {\n    this.ensureNotClosed();\n    await this.syncMapImpl.removeMap();\n  }\n\n  /**\n   * Conclude work with the map instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this map will continue operating and receiving events normally.\n   * @example\n   * ```typescript\n   * map.close();\n   * ````\n   */\n  public close(): void {\n    super.close();\n    this.syncMapImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexport { SyncMapItemMetadata, SyncMapItemQueryOptions, SyncMapImpl, SyncMap };\n\nexport default SyncMap;\n","import { EntityServices, RemovalHandler, SyncEntity } from '../entity';\nimport { PublishMessageRequest, PublishMessageResponse, StreamDescriptor } from './serverapi';\nimport Closeable from '../closeable';\nimport { nonNegativeInteger, pureObject, validateTypesAsync } from '@twilio/declarative-type-validator';\n\nexport interface SyncStreamServices extends EntityServices {\n}\n\n/**\n * Stream message descriptor.\n */\nexport interface SyncStreamMessage {\n  /**\n   * Stream message SID.\n   */\n  sid: string;\n\n  /**\n   * Stream message data.\n   */\n  data: object;\n}\n\nclass SyncStreamImpl extends SyncEntity {\n\n  private readonly descriptor: StreamDescriptor;\n\n  /**\n   * @internal\n   */\n  constructor(services: SyncStreamServices, descriptor: StreamDescriptor, removalHandler: RemovalHandler) {\n    super(services, removalHandler);\n    this.descriptor = descriptor;\n  }\n\n  // private props\n  get uri(): string {\n    return this.descriptor.url;\n  }\n\n  get links(): any {\n    return this.descriptor.links;\n  }\n\n  static get type() {\n    return 'stream';\n  }\n\n  get dateExpires(): string {\n    return this.descriptor.date_expires;\n  }\n\n  get type() {\n    return 'stream';\n  }\n\n  get lastEventId() {\n    return null;\n  }\n\n  // below properties are specific to Insights only\n  get indexName(): string {\n    return undefined;\n  }\n\n  get queryString(): string {\n    return undefined;\n  }\n\n  // public props, documented along with class description\n  get sid() {\n    return this.descriptor.sid;\n  }\n\n  get uniqueName() {\n    return this.descriptor.unique_name || null;\n  }\n\n  @validateTypesAsync(pureObject)\n  public async publishMessage(data: object): Promise<SyncStreamMessage> {\n    const requestBody: PublishMessageRequest = {data};\n    const response = await this.services.network.post(this.links.messages, requestBody);\n    const responseBody: PublishMessageResponse = response.body;\n\n    const event = this._handleMessagePublished(responseBody.sid, data, false);\n    return event;\n  }\n\n  @validateTypesAsync(nonNegativeInteger)\n  public async setTtl(ttl: number): Promise<void> {\n    try {\n      const requestBody = {ttl: ttl};\n      const response = await this.services.network.post(this.uri, requestBody);\n      this.descriptor.date_expires = response.body.date_expires;\n    } catch (error) {\n      if (error.status === 404) {\n        this.onRemoved(false);\n      }\n      throw error;\n    }\n  }\n\n  public async removeStream() {\n    await this.services.network.delete(this.uri);\n    this.onRemoved(true);\n  }\n\n  /**\n   * Handle event from the server\n   * @private\n   */\n  _update(update): void {\n    switch (update.type) {\n      case 'stream_message_published': {\n        this._handleMessagePublished(update.message_sid, update.message_data, true);\n        break;\n      }\n      case 'stream_removed': {\n        this.onRemoved(false);\n        break;\n      }\n    }\n  }\n\n  private _handleMessagePublished(sid: string, data: object, remote: boolean): SyncStreamMessage {\n    const event: SyncStreamMessage = {\n      sid: sid,\n      data: data\n    };\n\n    this.broadcastEventToListeners('messagePublished', {message: event, isLocal: !remote});\n    return event;\n  }\n\n  protected onRemoved(isLocal: boolean) {\n    this._unsubscribe();\n    this.removalHandler(this.type, this.sid, this.uniqueName);\n    this.broadcastEventToListeners('removed', {isLocal: isLocal});\n  }\n}\n\n/**\n * A Sync primitive for pub-sub messaging. Stream Messages are not persisted, exist\n * only in transit, and will be dropped if (due to congestion or network anomalies) they\n * cannot be delivered promptly. Use the {@link SyncClient.stream} method to obtain a reference to a Sync Message Stream.\n * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).\n */\nclass SyncStream extends Closeable {\n\n  private readonly syncStreamImpl: SyncStreamImpl;\n\n  // private props\n  get uri(): string {\n    return this.syncStreamImpl.uri;\n  }\n\n  get links(): any {\n    return this.syncStreamImpl.links;\n  }\n\n  static get type() {\n    return SyncStreamImpl.type;\n  }\n\n  get dateExpires(): string {\n    return this.syncStreamImpl.dateExpires;\n  }\n\n  get type() {\n    return SyncStreamImpl.type;\n  }\n\n  get lastEventId() {\n    return null;\n  }\n\n  /**\n   * The immutable system-assigned identifier of this stream. Never null.\n   */\n  get sid() {\n    return this.syncStreamImpl.sid;\n  }\n\n  /**\n   * A unique identifier optionally assigned to the stream on creation.\n   */\n  get uniqueName() {\n    return this.syncStreamImpl.uniqueName;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(syncStreamImpl: SyncStreamImpl) {\n    super();\n    this.syncStreamImpl = syncStreamImpl;\n    this.syncStreamImpl.attach(this);\n  }\n\n  /**\n   * Fired when a message is published to the stream either locally or by a remote actor.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * {@link SyncStreamMessage} `message` -  Published message\n   *     * boolean `isLocal` - equals true if the message was published by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * stream.on('messagePublished', (args) => {\n   *   console.log('Stream message published');\n   *   console.log('Message SID:', args.message.sid);\n   *   console.log('Message data: ', args.message.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly messagePublished = 'messagePublished';\n\n  /**\n   * Fired when a stream is removed entirely, regardless of whether the remover was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * boolean `isLocal` - equals true if the stream was removed by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * stream.on('removed', (args) => {\n   *   console.log(`Stream ${stream.sid} was removed`);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Publish a message to the stream. The system will attempt delivery to all online subscribers.\n   * @param data The body of the dispatched message. Maximum size in serialized JSON: 4KB.\n   * A rate limit applies to this operation, refer to the [Sync API documentation](https://www.twilio.com/docs/api/sync) for details.\n   * @return A promise which resolves after the message is successfully published\n   * to the Sync service. Resolves irrespective of ultimate delivery to any subscribers.\n   * @example\n   * ```typescript\n   * stream.publishMessage({ x: 42, y: 123 })\n   *   .then((message) => {\n   *     console.log('Stream publishMessage() successful, message SID:', message.sid);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Stream publishMessage() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(pureObject)\n  public async publishMessage(data: object): Promise<SyncStreamMessage> {\n    this.ensureNotClosed();\n    return this.syncStreamImpl.publishMessage(data);\n  }\n\n  /**\n   * Update the time-to-live of the stream.\n   * @param ttl Specifies the TTL in seconds after which the stream is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * stream.setTtl(3600)\n   *   .then(() => {\n   *     console.log('Stream setTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Stream setTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async setTtl(ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncStreamImpl.setTtl(ttl);\n  }\n\n  /**\n   * Permanently delete this Stream.\n   * @return A promise which resolves after the Stream is successfully deleted.\n   * @example\n   * ```typescript\n   * stream.removeStream()\n   *   .then(() => {\n   *     console.log('Stream removeStream() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Stream removeStream() failed', error);\n   *   });\n   * ```\n   */\n  public async removeStream() {\n    this.ensureNotClosed();\n    return this.syncStreamImpl.removeStream();\n  }\n\n  /**\n   * Conclude work with the stream instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this stream will continue operating and receiving events normally.\n   * @example\n   * ```typescript\n   * stream.close();\n   * ```\n   */\n  public close(): void {\n    super.close();\n    this.syncStreamImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexport { SyncStream, SyncStreamImpl };\nexport default SyncStream;\n","import * as platform from 'platform';\n\nclass ClientInfo {\n  sdk: string;\n  sdkVer: string;\n  os: string;\n  osVer: string;\n  pl: string;\n  plVer: string;\n\n  constructor(version: string) {\n    this.sdk = 'js';\n    this.sdkVer = version;\n    this.os = platform.os.family;\n    this.osVer = platform.os.version;\n    this.pl = platform.name;\n    this.plVer = platform.version;\n  }\n}\n\nexport default ClientInfo;\nexport { ClientInfo };","import { SyncEntity } from './entity';\n\n/**\n * Container for entities which are known by the client\n * It's needed for deduplication when client obtain the same object several times\n */\nexport class EntitiesCache {\n  private readonly names: Map<string, string>;\n  private readonly entities: Map<string, SyncEntity>;\n\n  constructor() {\n    this.names = new Map<string, string>();\n    this.entities = new Map<string, SyncEntity>();\n  }\n\n  store<T extends SyncEntity>(entity: T): T {\n    let stored = this.entities.get(entity.sid);\n    if (stored) {\n      return stored as T;\n    }\n\n    this.entities.set(entity.sid, entity);\n    if (entity.uniqueName) {\n      this.names.set(entity.type + '::' + entity.uniqueName, entity.sid);\n    }\n    return entity;\n  }\n\n  protected getResolved(id: string, type: string): SyncEntity {\n    let resolvedSid = this.names.get(type + '::' + id);\n    return resolvedSid ? this.entities.get(resolvedSid) : null;\n  }\n\n  get(id: string, type: string): SyncEntity {\n    return this.entities.get(id) || this.getResolved(id, type) || null;\n  }\n\n  remove(sid: string): void {\n    let cached = this.entities.get(sid);\n    if (cached) {\n      this.entities.delete(sid);\n      if (cached.uniqueName) {\n        this.names.delete(cached.type + '::' + cached.uniqueName);\n      }\n    }\n  }\n}\n","import { UriBuilder } from './utils/uri';\nimport { SyncError } from './utils/syncerror';\nimport log from './utils/logger';\n\nimport { EventEmitter } from 'events';\nimport { SyncEntity, EntityServices, RemovalHandler } from './entity';\nimport { Network } from './interfaces/services';\nimport { Closeable } from './closeable';\nimport { Cache } from './cache';\nimport { nonEmptyString, validateTypes, validateTypesAsync } from '@twilio/declarative-type-validator';\n\nexport interface InsightsServices extends EntityServices {\n}\n\n/**\n * An individual result from a LiveQuery or InstantQuery result set.\n */\nexport class InsightsItem {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * The identifier that maps to this item within the search result.\n   */\n  key: string;\n\n  /**\n   * The contents of the item.\n   */\n  value: object;\n}\n\n/**\n * A result set, i.e. a collection of items that matched a LiveQuery or InstantQuery expression.\n * Each result is a key-value pair, where each key identifies its object uniquely. These\n * results are equivalent to a set of InsightsItem-s.\n */\nexport interface ItemsSnapshot {\n  [key: string]: object;\n}\n\nexport interface InsightsQueryResponse {\n  query_id: string;\n  last_event_id: number;\n  items?: [{\n    key: string;\n    data: object;\n    revision: number;\n  }];\n}\n\nexport interface LiveQueryDescriptor {\n  indexName: string;\n  sid: string;\n  queryExpression: string;\n  queryUri: string;\n  last_event_id: number;\n}\n\nexport type LiveQueryCreator = (indexName: string, queryExpression: string) => Promise<LiveQuery>;\n\nexport class LiveQueryImpl extends SyncEntity {\n\n  private readonly descriptor: LiveQueryDescriptor;\n  private readonly cache: Cache<string, InsightsItem>;\n\n  constructor(descriptor: LiveQueryDescriptor, services: InsightsServices, removalHandler: RemovalHandler, items?: any) {\n    super(services, removalHandler);\n    this.descriptor = descriptor;\n    this.cache = new Cache<string, InsightsItem>();\n\n    if (items) {\n      items.forEach(item => {\n        this.cache.store(item.key, { key: item.key, value: item.data} as InsightsItem, item.revision);\n      });\n    }\n  }\n\n  // public\n  get sid() {\n    return this.descriptor.sid;\n  }\n\n  // private extension of SyncEntity\n  get uniqueName() {\n    return null;\n  }\n\n  get type() {\n    return LiveQueryImpl.type;\n  }\n\n  static get type() {\n    return 'live_query';\n  }\n\n  get lastEventId() {\n    return this.descriptor.last_event_id;\n  }\n\n  get indexName() {\n    return this.descriptor.indexName;\n  }\n\n  get queryString() {\n    return this.descriptor.queryExpression;\n  }\n\n  // custom private props\n  get queryUri() {\n    return this.descriptor.queryUri;\n  }\n\n  get liveQueryDescriptor() {\n    return this.descriptor;\n  }\n\n  // dummy stub from iface\n  protected onRemoved() {\n  }\n\n  public getItems(): ItemsSnapshot {\n    const dataByKey = {};\n    this.cache.forEach((key, item) => {\n      dataByKey[key] = item.value;\n    });\n    return dataByKey;\n  }\n\n  /**\n   * @internal\n   */\n  _update(message: any, isStrictlyOrdered: boolean): void {\n    switch (message.type) {\n      case 'live_query_item_updated':\n        this.handleItemMutated(message.item_key, message.item_data, message.item_revision);\n        break;\n      case 'live_query_item_removed':\n        this.handleItemRemoved(message.item_key, message.item_revision);\n        break;\n      case 'live_query_updated':\n        this.handleBatchUpdate(message.items);\n        break;\n    }\n\n    if (isStrictlyOrdered) {\n      this._advanceLastEventId(message.last_event_id);\n    }\n  }\n\n  private handleItemMutated(key: string, value: object, revision: number) {\n    if (this.shouldIgnoreEvent(key, revision)) {\n      log.trace(`Item ${key} update skipped, revision: ${revision}`);\n    } else {\n      const newItem: InsightsItem = {key, value};\n      this.cache.store(key, newItem, revision);\n      this.broadcastEventToListeners('itemUpdated', newItem);\n    }\n  }\n\n  private handleItemRemoved(key: string, revision: number) {\n    const force = (revision === null);\n    if (this.shouldIgnoreEvent(key, revision)) {\n      log.trace(`Item ${key} delete skipped, revision: ${revision}`);\n    } else {\n      this.cache.delete(key, revision, force);\n      this.broadcastEventToListeners('itemRemoved', {key});\n    }\n  }\n\n  private handleBatchUpdate(items) {\n    // preprocess item set for easy key-based access (it's a one-time constant time operation)\n    let newItems = {};\n    if (items != null) {\n      items.forEach(item => {\n        newItems[item.key] = {\n          data: item.data,\n          revision: item.revision\n        };\n      });\n    }\n\n    // go through existing items and generate update/remove events for them\n    this.cache.forEach((key, item) => {\n      const newItem = newItems[key];\n      if (newItem != null) {\n        this.handleItemMutated(key, newItem.data, newItem.revision);\n      } else {\n        this.handleItemRemoved(key, null); // force deletion w/o revision\n      }\n      // once item is handled, remove it from incoming array\n      delete newItems[key];\n    });\n\n    // once we handled all the known items, handle remaining pack\n    for (let key in newItems) {\n      this.handleItemMutated(key, newItems[key].data, newItems[key].revision);\n    }\n  }\n\n  private shouldIgnoreEvent(key: string, eventId: number) {\n    return key != null && eventId != null && this.cache.isKnown(key, eventId);\n  }\n\n  /**\n   * @internal\n   */\n  _advanceLastEventId(eventId: number, revision?: string): void {\n    // LiveQuery is not revisioned in any way, so simply ignore second param and act upon lastEventId only\n    if (this.lastEventId < eventId) {\n      this.descriptor.last_event_id = eventId;\n    }\n  }\n}\n\nexport async function queryItems(params: any): Promise<InsightsQueryResponse>  {\n  let { network, queryString, uri, type } = params;\n  if (queryString == null) { // should not be null or undefined\n    throw new SyncError(`Invalid query`, 400, 54507);\n  }\n  const liveQueryRequestBody: any = {\n    query_string: queryString // raw query string (like `key == \"value\" AND key2 != \"value2\"`)\n  };\n\n  if (type === LiveQuery.type) {\n    liveQueryRequestBody.type = type;\n  }\n\n  let response = await network.post(uri, liveQueryRequestBody, undefined, true);\n  return response.body;\n}\n\n/**\n * Represents a long-running query against Flex data wherein the returned result set\n * subsequently receives pushed updates whenever new (or updated) records would match the\n * given expression. Updated results are presented row-by-row until this query is explicitly\n * closed.\n *\n * Use the {@link SyncClient.liveQuery} method to create a live query.\n */\nexport class LiveQuery extends Closeable {\n  private readonly liveQueryImpl: LiveQueryImpl;\n\n  // private props\n  static get type() {\n    return LiveQueryImpl.type;\n  }\n\n  get type() {\n    return LiveQueryImpl.type;\n  }\n\n  get lastEventId(): number {\n    return this.liveQueryImpl.lastEventId;\n  }\n\n  /**\n   * The immutable identifier of this query object, assigned by the system.\n   */\n  get sid(): string {\n    return this.liveQueryImpl.sid;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(liveQueryImpl: LiveQueryImpl) {\n    super();\n    this.liveQueryImpl = liveQueryImpl;\n    this.liveQueryImpl.attach(this);\n  }\n\n  /**\n   * Fired when an item has been added or updated.\n   *\n   * Parameters:\n   * 1. {@link InsightsItem} `item` - updated item\n   * @example\n   * ```typescript\n   * liveQuery.on('itemUpdated', (item) => {\n   *   console.log(`Item ${item.key} was updated`'`);\n   *   console.log('Item value:', item.value);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemUpdated = 'itemUpdated';\n\n  /**\n   * Fired when an existing item has been removed.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * object `key` - the key of the removed item\n   * @example\n   * ```typescript\n   * liveQuery.on('itemRemoved', (args) => {\n   *   console.log(`Item ${args.key} was removed`);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemRemoved = 'itemRemoved';\n\n  /**\n   * Closes this query instance and unsubscribes from further service events.\n   * This will eventually stop the physical inflow of updates over the network, when all other instances of this query are closed as well.\n   */\n  public close(): void {\n    super.close();\n    this.liveQueryImpl.detach(this.listenerUuid);\n  }\n\n  /**\n   * @return A snapshot of items matching the current query expression.\n   */\n  public getItems(): ItemsSnapshot {\n    this.ensureNotClosed();\n    return this.liveQueryImpl.getItems();\n  }\n}\n\n/**\n * Allows repetitive quick searches against a specific Flex data. Unlike a\n * LiveQuery, this result set does not subscribe to any updates and therefore receives no events\n * beyond the initial result set.\n *\n * Use the {@link SyncClient.instantQuery} method to create an Instant Query.\n */\nexport class InstantQuery extends EventEmitter {\n  private indexName: string;\n  private queryUri: string;\n  private readonly insightsUri: string;\n  private readonly liveQueryCreator: LiveQueryCreator;\n  private readonly network: Network;\n  private queryExpression: string = null;\n  private items = {};\n\n  // private props\n  static get type() {\n    return 'instant_query';\n  }\n\n  get type() {\n    return InstantQuery.type;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(params: any) {\n    super();\n    Object.assign(this, params);\n    this.updateIndexName(params.indexName);\n  }\n\n  /**\n   * Fired when a search result is ready.\n   *\n   * Parameters:\n   * 1. {@link ItemsSnapshot} `items` - a snapshot of items matching current query expression.\n   * @example\n   * ```typescript\n   * instantQuery.on('searchResult', (items) => {\n   *    Object.entries(items).forEach(([key, value]) => {\n   *      console.log('Search result item key:', key);\n   *      console.log('Search result item value:', value);\n   *    });\n   * });\n   * ```\n   * @event\n   */\n  static readonly searchResult = 'searchResult';\n\n  /**\n   * Spawns a new search request. The result will be provided asynchronously via the {@link InstantQuery.searchResult}\n   * event.\n   * @param queryExpression A query expression to be executed against the given data index. For more information\n   * on the syntax read {@link SyncClient.liveQuery}.\n   * @return A promise that resolves when query result has been received.\n   */\n  @validateTypesAsync('string')\n  public async search(queryExpression: string): Promise<void> {\n    this.items = {};\n    return queryItems({\n      network: this.network,\n      uri: this.queryUri,\n      queryString: queryExpression,\n    })\n      .then((response) => {\n        this.queryExpression = queryExpression;\n        if (response.items) {\n          response.items.forEach((item) => {\n            this.items[item.key] = item.data;\n          });\n        }\n        this.emit('searchResult', this.getItems());\n      })\n      .catch((err) => {\n        log.error(\n            `Error '${err.message}' while executing query '${queryExpression}'`\n        );\n        this.queryExpression = null;\n        throw err;\n      });\n  }\n\n  /**\n   * Instantiates a LiveQuery object based on the last known query expression that was passed to the\n   * {@link InstantQuery.search} method. This LiveQuery will start receiving updates with new results,\n   * while current object can be still used to execute repetitive searches.\n   * @return A promise which resolves when the LiveQuery object is ready.\n   */\n  public async subscribe(): Promise<LiveQuery> {\n    if (this.queryExpression == null) { // should not be null or undefined\n      return Promise.reject(new SyncError(`Invalid query`, 400, 54507));\n    }\n\n    return this.liveQueryCreator(this.indexName, this.queryExpression);\n  }\n\n  /**\n   * @return A snapshot of items matching current query expression.\n   */\n  public getItems(): ItemsSnapshot {\n    return this.items;\n  }\n\n  /**\n   * Set new index name\n   * @param indexName New index name to set\n   */\n  @validateTypes(nonEmptyString)\n  public updateIndexName(indexName: string): void {\n    this.indexName = indexName;\n    this.queryUri = this.generateQueryUri(this.indexName);\n  }\n\n  private generateQueryUri(indexName: string) {\n    return new UriBuilder(this.insightsUri)\n      .pathSegment(indexName)\n      .pathSegment('Items')\n      .build();\n  }\n}\n\nexport default LiveQuery;\n","import { EventEmitter } from 'events';\n\nimport { literal, nonEmptyString, nonNegativeInteger, objectSchema, pureObject, validateTypesAsync } from '@twilio/declarative-type-validator';\nimport { Twilsock, InitRegistration, ConnectionState as TwilsockConnectionState } from 'twilsock';\n\nimport { UriBuilder } from './utils/uri';\nimport { SyncError } from './utils/syncerror';\nimport { deepClone } from './utils/sanitize';\nimport log from './utils/logger';\n\nimport { Configuration } from './configuration';\nimport { Subscriptions } from './subscriptions';\n\nimport { Services } from './interfaces/services';\nimport { NetworkService } from './services/network';\nimport { SessionStorage } from './services/storage';\n\nimport { RemovalHandler, SyncEntity } from './entity';\nimport { DocumentDescriptor, SyncDocument, SyncDocumentImpl } from './syncdocument';\nimport { SyncListDescriptor, SyncList, SyncListImpl } from './synclist';\nimport { SyncMapDescriptor, SyncMap, SyncMapImpl } from './syncmap';\nimport { SyncStream, SyncStreamImpl } from './streams/syncstream';\nimport { StreamDescriptor } from './streams/serverapi';\nimport { ClientInfo } from './clientInfo';\nimport { EntitiesCache } from './entitiesCache';\nimport { LiveQuery, InstantQuery, LiveQueryImpl, LiveQueryDescriptor } from './livequery';\nimport { LiveQueryCreator, queryItems } from './livequery';\nimport { version } from '../package.json';\n\nconst SYNC_PRODUCT_ID = 'data_sync';\nconst SDK_VERSION = version;\n\ntype json = { [key: string]: any };\n\n/**\n * Mode for opening the Sync object:\n * * `'open_or_create'` - reads a Sync object or creates one if it does not exist.\n * * `'open_existing'` - reads an existing Sync object. The promise is rejected if the object does not exist.\n * * `'create_new'` - creates a new Sync object. If the *id* property is specified, it will be used as the unique name.\n */\ntype OpenMode = 'open_or_create'\n  | 'open_existing'\n  | 'create_new';\n\n/**\n * Client connection state.\n * Directly reflects connection state of the underlying websocket transport.\n * Possible values are as follows:\n * * 'connecting' - client is offline and connection attempt is in process.\n * * 'connected' - client is online and ready.\n * * 'disconnecting' - client is going offline as disconnection is in process.\n * * 'disconnected' - client is offline and no connection attempt is in process.\n * * 'denied' - client connection is denied because of invalid JWT access token. User must refresh token in order to proceed.\n * * 'error' - client connection is in a permanent erroneous state. Client re-initialization is required.\n */\ntype ConnectionState = TwilsockConnectionState;\n\n/**\n * Client options.\n */\ninterface SyncClientOptions {\n  /**\n   * The level of logging to enable.\n   */\n  logLevel?: 'silent' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\n\n  [key: string]: any;\n}\n\n/**\n * Options for opening a Sync object.\n *\n * @example The following example is applicable to all Sync objects\n * (i.e., `syncClient.document()`, `syncClient.list()`,` syncClient.map()`, `syncClient.stream()`)\n * ```typescript\n * // Attempts to open an existing document with a unique name of 'MyDocument'\n * // If no such document exists, the promise is rejected\n * syncClient.document({\n *   id: 'MyDocument',\n *   mode: 'open_existing'\n * })\n *   .then(...)\n *   .catch(...);\n *\n * // Attempts to create a new document with a unique name of 'MyDocument', TTL of 24 hours and initial data `{ name: 'John Smith' }`\n * // If such a document already exists, the promise is rejected\n * syncClient.document({\n *   id: 'MyDocument',\n *   mode: 'create_new',\n *   ttl: 86400\n *   data: { name: 'John Smith' } // the `data` property is only applicable for Documents\n * })\n *   .then(...)\n *   .catch(...);\n * ```\n */\ninterface OpenOptions {\n  /**\n   * Sync object SID or unique name.\n   */\n  id?: string;\n\n  /**\n   * Mode for opening the Sync object.\n   */\n  mode?: OpenMode;\n\n  /**\n   * The time-to-live of the Sync object in seconds. This is applied only if the object is created.\n   */\n  ttl?: number;\n}\n\n/**\n * Options for opening a document.\n */\ninterface OpenDocumentOptions extends OpenOptions {\n  /**\n   * The initial data of the Sync document.\n   */\n  data?: json;\n}\n\n/**\n * List options.\n */\ninterface OpenListOptions extends OpenOptions {\n  purpose?: string;\n  context?: json;\n  includeItems?: boolean;\n}\n\n/**\n * Map options.\n */\ninterface OpenMapOptions extends OpenOptions {\n  includeItems?: boolean;\n}\n\n/**\n * Stream options.\n */\ninterface OpenStreamOptions extends OpenOptions {\n}\n\nfunction decompose(arg?: string | OpenOptions): OpenOptions {\n  if (!arg) {\n    return {mode: 'create_new'};\n  } else if (typeof arg === 'string') {\n    return {id: arg, mode: 'open_or_create'};\n  } else {\n    let mode = arg.mode || (arg.id ? 'open_or_create' : 'create_new');\n    return {...arg, mode: mode};\n  }\n}\n\nconst SYNC_DOCUMENT_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.document';\nconst SYNC_LIST_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.list';\nconst SYNC_MAP_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.map';\nconst SYNC_NOTIFICATION_TYPE = 'twilio.sync.event';\n\n/**\n * Client for the Twilio Sync service.\n *\n * @example\n * ```typescript\n * // Using NPM resolution\n * const SyncClient = require('twilio-sync');\n * const syncClient = new SyncClient(token, { loglevel: 'debug' });\n *\n * // Using CDN\n * const syncClient = new Twilio.Sync.Client(token, { logLevel: 'debug' });\n * ```\n */\nclass Client extends EventEmitter {\n  private readonly services: Services;\n  private readonly entities: EntitiesCache;\n\n  /**\n   * @param fpaToken Twilio access token.\n   * @param options Options to customize the client.\n   */\n  constructor(fpaToken: string, options: SyncClientOptions = {}) {\n    super();\n\n    if (!fpaToken) {\n      throw new Error('Sync library needs a valid Twilio token to be passed');\n    }\n\n    if (options.hasOwnProperty('logLevel')) {\n      log.setLevel(options.logLevel);\n    } else {\n      log.setLevel('silent');\n    }\n\n    const productId = options.productId = options.productId || SYNC_PRODUCT_ID;\n\n    // Fill ClientMetadata\n    options.clientMetadata = options.clientMetadata || {};\n    if (!options.clientMetadata.hasOwnProperty('type')) {\n      options.clientMetadata.type = 'sync';\n    }\n    if (!options.clientMetadata.hasOwnProperty('sdk')) {\n      options.clientMetadata.sdk = 'JS';\n      options.clientMetadata.sdkv = SDK_VERSION;\n    }\n\n    const startTwilsock = !options.twilsockClient;\n\n    // Create default init registrations if none were provided.\n    // Otherwise, the outside party have to list all the init registrations they need, including Sync ones.\n    if (!options.initRegistrations) {\n      let initRegistration = new InitRegistration(productId);\n      Client.populateInitRegistrations(initRegistration);\n      options.initRegistrations = [initRegistration];\n    }\n\n    let twilsock = options.twilsockClient = options.twilsockClient || new Twilsock(fpaToken, productId, options);\n    twilsock.on('tokenAboutToExpire', ttl => this.emit('tokenAboutToExpire', ttl));\n    twilsock.on('tokenExpired', () => this.emit('tokenExpired'));\n    twilsock.on('connectionError', err => this.emit('connectionError', err));\n    twilsock.on('stateChanged', (state) => {\n      this.emit('connectionStateChanged', state);\n      /**\n       * Handle transport establishing event\n       * If we have any subscriptions - we should check object for modifications\n       */\n      this.services.subscriptions.onConnectionStateChanged(state === 'connected');\n    });\n    twilsock.on('message', (messageType, payload) => this._routeMessage(messageType, payload));\n\n    let config = new Configuration(options);\n    let network = new NetworkService(new ClientInfo(SDK_VERSION), config, twilsock);\n    let storage = new SessionStorage(config);\n\n    this.services = {\n      config,\n      twilsock,\n      network,\n      storage,\n      router: this,\n      subscriptions: null\n    };\n\n    this.services.subscriptions = new Subscriptions(this.services);\n\n    this.entities = new EntitiesCache();\n\n    // Start only if we created twilsock locally,\n    // otherwise it's the responsibility of whoever created the Twilsock client.\n    if (startTwilsock) {\n      twilsock.connect();\n    }\n  }\n\n  /**\n   * Fired when connection state has been changed.\n   *\n   * Parameters:\n   * 1. {@link ConnectionState} `connectionState` - contains current service connection state.\n   * @example\n   * ```typescript\n   * syncClient.on('connectionStateChanged', (newState) => {\n   *   console.log('Received a new connection state:', newState);\n   * });\n   * ```\n   * @event\n   */\n  static readonly connectionStateChanged = 'connectionStateChanged';\n\n  /**\n   * Fired when connection is interrupted by unexpected reason.\n   *\n   * Parameters:\n   * 1. object `connectionError` - connection error details. It has following properties:\n   *     * boolean `terminal` - twilsock will stop connection attempts\n   *     * string `message` - root cause\n   *     * number? `httpStatusCode` - HTTP status code if available\n   *     * number? `errorCode` - Twilio public error code if available\n   * @example\n   * ```typescript\n   * syncClient.on('connectionError', (connectionError) => {\n   *   console.error('Connection was interrupted:', connectionError.message);\n   *   console.error('Is terminal:', connectionError.terminal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly connectionError = 'connectionError';\n\n  /**\n   * Fired when the access token is about to expire and needs to be updated.\n   * The trigger takes place three minutes before the JWT access token expiry.\n   * For long living applications, you should refresh the token when either\n   * {@link SyncClient.tokenAboutToExpire | tokenAboutToExpire} or\n   * {@link SyncClient.tokenExpired | tokenExpire} events occur; handling just\n   * one of them is sufficient.\n   * @example\n   * The following example illustrates access token refresh.\n   * ```typescript\n   * syncClient.on('tokenAboutToExpire', () => {\n   *   // Obtain a JWT access token: https://www.twilio.com/docs/sync/identity-and-access-tokens\n   *   const token = '<your-access-token-here>';\n   *   syncClient.updateToken(token);\n   * });\n   * ```\n   * @event\n   */\n  static readonly tokenAboutToExpire = 'tokenAboutToExpire';\n\n  /**\n   * Fired when the access token is expired.\n   * In case the token is not refreshed, all subsequent Sync operations will fail and the client will disconnect.\n   * For long living applications, you should refresh the token when either\n   * {@link SyncClient.tokenAboutToExpire | tokenAboutToExpire} or\n   * {@link SyncClient.tokenExpired | tokenExpire} events occur; handling just\n   * one of them is sufficient.\n   * @event\n   */\n  static readonly tokenExpired = 'tokenExpired';\n\n  static populateInitRegistrations(reg: InitRegistration) {\n    reg.populateInitRegistrations([SYNC_NOTIFICATION_TYPE, SYNC_DOCUMENT_NOTIFICATION_TYPE,\n      SYNC_LIST_NOTIFICATION_TYPE, SYNC_MAP_NOTIFICATION_TYPE]);\n  }\n\n  /**\n   * Entry point for all the incoming messages (Router).\n   *\n   * @param type Type of the incoming message\n   * @param message Message to route\n   * @internal\n   */\n  _routeMessage(type: string, message: any) {\n    log.trace('Notification type:', type, 'content:', message);\n    switch (type) {\n      case SYNC_DOCUMENT_NOTIFICATION_TYPE:\n      case SYNC_LIST_NOTIFICATION_TYPE:\n      case SYNC_MAP_NOTIFICATION_TYPE:\n        this.services.subscriptions.acceptMessage(message, false);\n        break;\n      case SYNC_NOTIFICATION_TYPE:\n        this.services.subscriptions.acceptMessage(message, true);\n        break;\n    }\n  }\n\n  /**\n   * Subscribe for events (Router)\n   *\n   * @internal\n   */\n  _subscribe(sid: string, entity: any) {\n    this.services.subscriptions.add(sid, entity);\n  }\n\n  /**\n   * Unsubscribe from events (Router)\n   *\n   * @internal\n   */\n  _unsubscribe(sid: string) {\n    this.services.subscriptions.remove(sid);\n  }\n\n  /**\n   * Current version of the Sync client.\n   */\n  static get version(): string {\n    return SDK_VERSION;\n  }\n\n  /**\n   * Current service connection state.\n   */\n  get connectionState(): ConnectionState {\n    return this.services.twilsock.state;\n  }\n\n  /**\n   * Returns a promise which resolves when library is correctly initialized\n   * Or throws if initialization is impossible\n   *\n   * @internal\n   */\n  private async ensureReady() {\n    if (!this.services.config.sessionStorageEnabled) {\n      return;\n    }\n\n    try {\n      let storageSettings = await this.services.twilsock.storageId();\n      this.services.storage.updateStorageId(storageSettings.id);\n    } catch (e) {\n      log.warn('Failed to initialize storage', e);\n    }\n  }\n\n  private storeRootInSessionCache(type: string, id: string, value: Object) {\n    // can't store without id\n    if (!this.services.config.sessionStorageEnabled || !id) {\n      return;\n    }\n\n    let valueToStore = deepClone(value);\n    if (type === SyncList.type || type === SyncMap.type) {\n      valueToStore['last_event_id'] = null;\n      delete valueToStore['items'];\n    }\n    this.services.storage.store(type, id, valueToStore);\n  }\n\n  private readRootFromSessionCache(type: string, id: string): Object {\n    if (!this.services.config.sessionStorageEnabled || !id) {\n      return null;\n    }\n    return this.services.storage.read(type, id);\n  }\n\n  private async _get(baseUri: string, id: string, optimistic: boolean = false) {\n    if (!id) {\n      throw new SyncError(`Cannot get entity without id`, 404);\n    }\n    const uri = new UriBuilder(baseUri).pathSegment(id)\n      .queryParam('Include', optimistic ? 'items' : undefined).build();\n    let response = await this.services.network.get(uri);\n    return response.body;\n  }\n\n  private _createDocument(id: string, data?: Object, ttl?: number) {\n    const requestBody: any = {\n      unique_name: id,\n      data: data || {}\n    };\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    return this.services.network.post(this.services.config.documentsUri, requestBody)\n      .then(response => {\n        response.body.data = requestBody.data;\n        return response.body;\n      });\n  }\n\n  private async _getDocument(id: string): Promise<DocumentDescriptor> {\n    return (this.readRootFromSessionCache(SyncDocument.type, id) || this._get(this.services.config.documentsUri, id)) as Promise<DocumentDescriptor>;\n  }\n\n  private _createList(id: string, purpose?: string, context?: json, ttl?: number) {\n    const requestBody: any = {\n      unique_name: id,\n      purpose: purpose,\n      context: context\n    };\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    return this.services.network.post(this.services.config.listsUri, requestBody).then(response => response.body);\n  }\n\n  private async _getList(id: string): Promise<SyncListDescriptor> {\n    return (this.readRootFromSessionCache(SyncList.type, id) || this._get(this.services.config.listsUri, id)) as Promise<SyncListDescriptor>;\n  }\n\n  private _createMap(id, ttl?: number) {\n    const requestBody: any = {\n      unique_name: id\n    };\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    return this.services.network.post(this.services.config.mapsUri, requestBody).then(response => response.body);\n  }\n\n  private async _getMap(id: string, optimistic: boolean = false): Promise<SyncMapDescriptor> {\n    return (this.readRootFromSessionCache(SyncMap.type, id) || this._get(this.services.config.mapsUri, id, optimistic)) as Promise<SyncMapDescriptor>;\n  }\n\n  private async _getStream(id: string): Promise<StreamDescriptor> {\n    return (this.readRootFromSessionCache(SyncStream.type, id) || this._get(this.services.config.streamsUri, id, false)) as Promise<StreamDescriptor>;\n  }\n\n  private async _createStream(id, ttl?: number): Promise<StreamDescriptor> {\n    const requestBody: any = {\n      unique_name: id\n    };\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    const response = await this.services.network.post(this.services.config.streamsUri, requestBody);\n\n    return response.body;\n  }\n\n  private _getLiveQuery(sid: string): LiveQueryDescriptor {\n    return this.readRootFromSessionCache(LiveQuery.type, sid) as LiveQueryDescriptor;\n  }\n\n  private getCached<T extends SyncEntity>(id: string, type: string): T {\n    if (id) {\n      return this.entities.get(id, type) as T || null;\n    }\n    return null;\n  }\n\n  private removeFromCacheAndSession(type: string, sid: string, uniqueName: string) {\n    this.entities.remove(sid);\n    if (this.services.config.sessionStorageEnabled) {\n      this.services.storage.remove(type, sid, uniqueName);\n    }\n  }\n\n  /**\n   * Read or create a Sync document.\n   * @param arg Could be any of the following:\n   * * Unique name or SID identifying the Sync document - opens the document with the given identifier or creates one if it does not exist.\n   * * none - creates a new document with a randomly assigned SID and no unique name.\n   * * {@link OpenDocumentOptions} object for more granular control.\n   * @return A promise which resolves after the document is successfully read (or created).\n   * This promise may reject if the document could not be created or if this endpoint lacks the necessary permissions to access it.\n   * @example\n   * ```typescript\n   * syncClient.document('MyDocument')\n   *   .then((document) => {\n   *     console.log('Successfully opened a document. SID:', document.sid);\n   *     document.on('updated', (event) => {\n   *       console.log('Received an \"updated\" event: ', event);\n   *     });\n   *   })\n   *   .catch((error) => {\n   *     console.error('Unexpected error', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync([\n    'undefined',\n    'string',\n    objectSchema('open document options', {\n      id: ['string', 'undefined'],\n      mode: [literal('open_or_create', 'open_existing', 'create_new'), 'undefined'],\n      ttl: [nonNegativeInteger, 'undefined'],\n      data: [pureObject, 'undefined', literal(null)]\n    })\n  ])\n  public async document(arg?: string | OpenDocumentOptions): Promise<SyncDocument> {\n    await this.ensureReady();\n    let opts: OpenDocumentOptions = decompose(arg);\n\n    let docDescriptor: DocumentDescriptor;\n    if (opts.mode === 'create_new') {\n      docDescriptor = await this._createDocument(opts.id, opts.data, opts.ttl);\n    } else {\n      let docFromInMemoryCache = this.getCached<SyncDocumentImpl>(opts.id, SyncDocument.type);\n      if (docFromInMemoryCache) {\n        return new SyncDocument(docFromInMemoryCache);\n      } else {\n        try {\n          docDescriptor = await this._getDocument(opts.id);\n        } catch (err) {\n          if (err.status !== 404 || opts.mode === 'open_existing') {\n            throw err;\n          } else {\n            try {\n              docDescriptor = await this._createDocument(opts.id, opts.data, opts.ttl);\n            } catch (err) {\n              if (err.status === 409) {\n                return this.document(arg);\n              } else {\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n    this.storeRootInSessionCache(SyncDocument.type, opts.id, docDescriptor);\n    let syncDocumentImpl = new SyncDocumentImpl(this.services, docDescriptor,\n      (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName));\n    syncDocumentImpl = this.entities.store(syncDocumentImpl);\n    return new SyncDocument(syncDocumentImpl);\n  }\n\n  /**\n   * Read or create a Sync map.\n   * @param arg Could be any of the following:\n   * * Unique name or SID identifying the Sync map - opens the map with the given identifier or creates one if it does not exist.\n   * * none - creates a new map with a randomly assigned SID and no unique name.\n   * * {@link OpenMapOptions} object for more granular control.\n   * @return A promise which resolves after the map is successfully read (or created).\n   * This promise may reject if the map could not be created or if this endpoint lacks the necessary permissions to access it.\n   * @example\n   * ```typescript\n   * syncClient.map('MyMap')\n   *   .then((map) => {\n   *     console.log('Successfully opened a map. SID:', map.sid);\n   *     map.on('itemUpdated', (event) => {\n   *       console.log('Received an \"itemUpdated\" event:', event);\n   *     });\n   *   })\n   *   .catch((error) => {\n   *     console.error('Unexpected error', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync([\n    'undefined',\n    'string',\n    objectSchema('open map options', {\n      id: ['string', 'undefined'],\n      mode: [literal('open_or_create', 'open_existing', 'create_new'), 'undefined'],\n      ttl: [nonNegativeInteger, 'undefined'],\n      data: [pureObject, 'undefined', literal(null)],\n      includeItems: ['boolean', 'undefined']\n    })\n  ])\n  public async map(arg?: string | OpenMapOptions): Promise<SyncMap> {\n    await this.ensureReady();\n    let opts: OpenMapOptions = decompose(arg);\n\n    let mapDescriptor: SyncMapDescriptor;\n    if (opts.mode === 'create_new') {\n      mapDescriptor = await this._createMap(opts.id, opts.ttl);\n    } else {\n      let mapFromInMemoryCache = this.getCached<SyncMapImpl>(opts.id, SyncMap.type);\n      if (mapFromInMemoryCache) {\n        return new SyncMap(mapFromInMemoryCache);\n      } else {\n        try {\n          mapDescriptor = await this._getMap(opts.id, opts.includeItems);\n        } catch (err) {\n          if (err.status !== 404 || opts.mode === 'open_existing') {\n            throw err;\n          } else {\n            try {\n              mapDescriptor = await this._createMap(opts.id, opts.ttl);\n            } catch (err) {\n              if (err.status === 409) {\n                return this.map(arg);\n              } else {\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n    this.storeRootInSessionCache(SyncMap.type, opts.id, mapDescriptor);\n    let syncMapImpl = new SyncMapImpl(this.services, mapDescriptor,\n      (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName));\n    syncMapImpl = this.entities.store(syncMapImpl);\n    return new SyncMap(syncMapImpl);\n  }\n\n  /**\n   * Read or create a Sync list.\n   * @param arg Could be any of the following:\n   * * Unique name or SID identifying a Sync list - opens the list with the given identifier or creates one if it does not exist.\n   * * none - creates a new list with a randomly assigned SID and no unique name.\n   * * {@link OpenListOptions} object for more granular control.\n   * @return A promise which resolves after the list is successfully read (or created).\n   * This promise may reject if the list could not be created or if this endpoint lacks the necessary permissions to access it.\n   * @example\n   * ```typescript\n   * syncClient.list('MyList')\n   *   .then((list) => {\n   *     console.log('Successfully opened a List. SID:', list.sid);\n   *     list.on('itemAdded', (event) => {\n   *       console.log('Received an \"itemAdded\" event:', event);\n   *     });\n   *   })\n   *   .catch((error) => {\n   *     console.error('Unexpected error', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync([\n    'undefined',\n    'string',\n    objectSchema('open list options', {\n      id: ['string', 'undefined'],\n      mode: [literal('open_or_create', 'open_existing', 'create_new'), 'undefined'],\n      ttl: [nonNegativeInteger, 'undefined'],\n      data: [pureObject, 'undefined', literal(null)],\n      purpose: ['string', 'undefined'],\n      context: [pureObject, 'undefined'],\n      includeItems: ['boolean', 'undefined']\n    })\n  ])\n  public async list(arg?: string | OpenListOptions): Promise<SyncList> {\n    await this.ensureReady();\n    let opts: OpenListOptions = decompose(arg);\n\n    let listDescriptor: SyncListDescriptor;\n    if (opts.mode === 'create_new') {\n      listDescriptor = await this._createList(opts.id, opts.purpose, opts.context, opts.ttl);\n    } else {\n      let listFromInMemoryCache = this.getCached<SyncListImpl>(opts.id, SyncList.type);\n      if (listFromInMemoryCache) {\n        return new SyncList(listFromInMemoryCache);\n      } else {\n        try {\n          listDescriptor = await this._getList(opts.id);\n        } catch (err) {\n          if (err.status !== 404 || opts.mode === 'open_existing') {\n            throw err;\n          } else {\n            try {\n              listDescriptor = await this._createList(opts.id, opts.purpose, opts.context, opts.ttl);\n            } catch (err) {\n              if (err.status === 409) {\n                return this.list(arg);\n              } else {\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n    this.storeRootInSessionCache(SyncList.type, opts.id, listDescriptor);\n    let syncListImpl = new SyncListImpl(this.services, listDescriptor,\n      (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName));\n    syncListImpl = this.entities.store(syncListImpl);\n    return new SyncList(syncListImpl);\n  }\n\n  /**\n   * Read or create a Sync message stream.\n   * @param arg Could be any of the following:\n   * * Unique name or SID identifying a stream - opens the stream with the given identifier or creates one if it does not exist.\n   * * none - creates a new stream with a randomly assigned SID and no unique name.\n   * * {@link OpenStreamOptions} object for more granular control.\n   * @return A promise which resolves after the stream is successfully read (or created).\n   * The flow of messages will begin imminently (but not necessarily immediately) upon resolution.\n   * This promise may reject if the stream could not be created or if this endpoint lacks the necessary permissions to access it.\n   * @example\n   * ```typescript\n   * syncClient.stream('MyStream')\n   *   .then((stream) => {\n   *     console.log('Successfully opened a message stream. SID:', stream.sid);\n   *     stream.on('messagePublished', (event) => {\n   *       console.log('Received a \"messagePublished\" event:', event);\n   *     });\n   *   })\n   *   .catch((error) => {\n   *     console.error('Unexpected error', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync([\n    'undefined',\n    'string',\n    objectSchema('open stream options', {\n      id: ['string', 'undefined'],\n      mode: [literal('open_or_create', 'open_existing', 'create_new'), 'undefined'],\n      ttl: [nonNegativeInteger, 'undefined'],\n      data: [pureObject, 'undefined', literal(null)]\n    })\n  ])\n  public async stream(arg?: string | OpenStreamOptions): Promise<SyncStream> {\n    await this.ensureReady();\n    let opts: OpenStreamOptions = decompose(arg);\n\n    let streamDescriptor: StreamDescriptor;\n    if (opts.mode === 'create_new') {\n      streamDescriptor = await this._createStream(opts.id, opts.ttl);\n    } else {\n      let streamFromInMemoryCache = this.getCached<SyncStreamImpl>(opts.id, SyncStream.type);\n      if (streamFromInMemoryCache) {\n        return new SyncStream(streamFromInMemoryCache);\n      } else {\n        try {\n          streamDescriptor = await this._getStream(opts.id);\n        } catch (err) {\n          if (err.status !== 404 || opts.mode === 'open_existing') {\n            throw err;\n          } else {\n            try {\n              streamDescriptor = await this._createStream(opts.id, opts.ttl);\n            } catch (err) {\n              if (err.status === 409) {\n                return this.stream(arg);\n              } else {\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n    this.storeRootInSessionCache(SyncStream.type, opts.id, streamDescriptor);\n    const streamRemovalHandler: RemovalHandler = (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName);\n    let syncStreamImpl = new SyncStreamImpl(this.services, streamDescriptor, streamRemovalHandler);\n    syncStreamImpl = this.entities.store(syncStreamImpl);\n    return new SyncStream(syncStreamImpl);\n  }\n\n  /**\n   * Gracefully shuts the Sync client down.\n   */\n  public async shutdown() {\n    await this.services.subscriptions.shutdown();\n    await this.services.twilsock.disconnect();\n  }\n\n  /**\n   * Set the authentication token.\n   * @param token New token to set.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async updateToken(token: string): Promise<void> {\n    return this.services.twilsock.updateToken(token)\n      .catch((error) => {\n        const status = error?.reply?.status;\n\n        if (status?.code === 401 && status?.status === 'UNAUTHORIZED') {\n          throw new SyncError('Updated token was rejected by server', 400, 51130);\n        }\n\n        throw error;\n      });\n  }\n\n  /**\n   * For Flex customers only. Establishes a long-running query against Flex data wherein the returned\n   * result set is updated whenever new (or updated) records match the given expression. Updated results\n   * are presented row-by-row according to the lifetime of the returned LiveQuery object.\n   *\n   * @param indexName Must specify one of the Flex data classes for which Live Queries are available.\n   * @param queryExpression A query expression to be executed against the given data index.\n   * Please review the [Live Query Language](https://www.twilio.com/docs/sync/live-query)\n   * page for Sync client limits and a full list of operators currently supported in query expressions.\n   *\n   * @return A promise that resolves when the query has been successfully executed.\n   * @example\n   * ```typescript\n   * syncClient.liveQuery('tr-worker', 'data.attributes.worker_name == \"Bob\"')\n   *   .then((args) => {\n   *      console.log('Subscribed to live data updates for worker Bob');\n   *      const items = args.getItems();\n   *      Object.entries(items).forEach(([key, value]) => {\n   *        console.log('Search result item key:', key);\n   *        console.log('Search result item value:', value);\n   *      });\n   *   })\n   *   .catch((err) => {\n   *      console.error('Error when subscribing to live updates for worker Bob', err);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonEmptyString, 'string')\n  public async liveQuery(indexName: string, queryExpression: string): Promise<LiveQuery> {\n    await this.ensureReady();\n    const queryUri = new UriBuilder(this.services.config.insightsUri)\n      .pathSegment(indexName)\n      .pathSegment('Items')\n      .build();\n\n    // send query to CDS to get server-generated sid and item list\n    const response = await queryItems({\n      network: this.services.network,\n      uri: queryUri,\n      queryString: queryExpression,\n      type: LiveQuery.type\n    });\n\n    let liveQueryImpl: LiveQueryImpl = this.getCached<LiveQueryImpl>(response.query_id, LiveQuery.type);\n    if (!liveQueryImpl) {\n      let descriptor: LiveQueryDescriptor = this._getLiveQuery(response.query_id);\n\n      if (!descriptor) {\n        descriptor = {\n          indexName,\n          queryExpression,\n          sid: response.query_id,\n          queryUri,\n          last_event_id: response.last_event_id\n        } as LiveQueryDescriptor;\n      }\n\n      const liveQueryRemovalHandler: RemovalHandler = (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName);\n      liveQueryImpl = new LiveQueryImpl(descriptor, this.services, liveQueryRemovalHandler, response.items);\n    }\n\n    this.storeRootInSessionCache(LiveQuery.type, response.query_id, liveQueryImpl.liveQueryDescriptor);\n    liveQueryImpl = this.entities.store(liveQueryImpl);\n    return new LiveQuery(liveQueryImpl);\n  }\n\n  /**\n   * For Flex customers only. Creates a query object that can be used to issue one-time queries repeatedly\n   * against the target index.\n   *\n   * @param indexName Must specify one of the Flex data classes for which live queries are available.\n   * @return A promise which resolves after the instance of InstantQuery is successfully created.\n   * @example\n   * ```typescript\n   * syncClient.instantQuery('tr-worker')\n   *   .then((q) => {\n   *     q.on('searchResult', (items) => {\n   *       Object.entries(items).forEach(([key, value]) => {\n   *         console.log('Search result item key:', key);\n   *         console.log('Search result item value:', value);\n   *       });\n   *     });\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async instantQuery(indexName: string): Promise<InstantQuery> {\n    await this.ensureReady();\n\n    const liveQueryCreator: LiveQueryCreator = (indexName, queryExpression) => {\n      return this.liveQuery(indexName, queryExpression);\n    };\n\n    return new InstantQuery({\n      indexName,\n      network: this.services.network,\n      insightsUri: this.services.config.insightsUri,\n      liveQueryCreator\n    });\n  }\n}\n\nexport {\n  Client,\n  SyncClientOptions,\n  ConnectionState,\n  OpenMode,\n  json,\n  OpenOptions,\n  OpenDocumentOptions,\n  OpenMapOptions,\n  OpenListOptions,\n  OpenStreamOptions\n};\n"],"names":["loglevelLog","Backoff","log","TransportUnavailableError","uuid","Retrier","uuidv4","validateTypesAsync","pureObject","objectSchema","nonNegativeInteger","custom","platform","validateTypes","nonEmptyString","InitRegistration","twilsock","Twilsock","literal"],"mappings":"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"}
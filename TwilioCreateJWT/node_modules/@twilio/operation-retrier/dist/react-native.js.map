{"version":3,"file":"react-native.js","sources":["../src/retrier.ts","../src/backoff.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\n\n/**\n * Provides retrier service\n */\nclass Retrier extends EventEmitter {\n  private readonly minDelay: number;\n  private maxDelay: number;\n  private readonly initialDelay: number;\n  private readonly maxAttemptsCount: number;\n  private readonly maxAttemptsTime: number;\n  private readonly randomness: number;\n\n  // fibonacci strategy\n  private prevDelay: number;\n  private currDelay: number;\n\n  private timeout: ReturnType<typeof setTimeout> | null = null;\n  private inProgress: boolean;\n  private attemptNum: number;\n  private startTimestamp = -1;\n\n  /**\n   * Creates a new Retrier instance\n   */\n  constructor(options: {\n    min: number;\n    max: number;\n    initial?: number;\n    maxAttemptsCount?: number;\n    maxAttemptsTime?: number;\n    randomness?: number;\n  }) {\n    super();\n\n    this.minDelay = options.min;\n    this.maxDelay = options.max;\n    this.initialDelay = options.initial || 0;\n    this.maxAttemptsCount = options.maxAttemptsCount || 0;\n    this.maxAttemptsTime = options.maxAttemptsTime || 0;\n    this.randomness = options.randomness || 0;\n\n    this.inProgress = false;\n    this.attemptNum = 0;\n\n    this.prevDelay = 0;\n    this.currDelay = 0;\n  }\n\n  private attempt() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n\n    this.attemptNum++;\n    this.emit(\"attempt\", this);\n  }\n\n  private nextDelay(delayOverride?: number): number {\n    if (typeof delayOverride === \"number\") {\n      this.prevDelay = 0;\n      this.currDelay = delayOverride;\n      return delayOverride;\n    }\n\n    if (this.attemptNum == 0) {\n      return this.initialDelay;\n    }\n\n    if (this.attemptNum == 1) {\n      this.currDelay = this.minDelay;\n      return this.currDelay;\n    }\n\n    this.prevDelay = this.currDelay;\n\n    let delay = this.currDelay + this.prevDelay;\n\n    if (this.maxDelay && delay > this.maxDelay) {\n      this.currDelay = this.maxDelay;\n      delay = this.maxDelay;\n    }\n\n    this.currDelay = delay;\n    return delay;\n  }\n\n  private randomize(delay: number) {\n    const area = delay * this.randomness;\n    const corr = Math.round(Math.random() * area * 2 - area);\n    return Math.max(0, delay + corr);\n  }\n\n  private scheduleAttempt(delayOverride?: number) {\n    if (this.maxAttemptsCount && this.attemptNum >= this.maxAttemptsCount) {\n      this.cleanup();\n      this.emit(\"failed\", new Error(\"Maximum attempt count limit reached\"));\n      return;\n    }\n\n    let delay = this.nextDelay(delayOverride);\n    delay = this.randomize(delay);\n    if (\n      this.maxAttemptsTime &&\n      this.startTimestamp + this.maxAttemptsTime < Date.now() + delay\n    ) {\n      this.cleanup();\n      this.emit(\"failed\", new Error(\"Maximum attempt time limit reached\"));\n      return;\n    }\n\n    this.timeout = setTimeout(() => this.attempt(), delay);\n  }\n\n  private cleanup() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n    this.inProgress = false;\n\n    this.attemptNum = 0;\n    this.prevDelay = 0;\n    this.currDelay = 0;\n  }\n\n  public start(): void {\n    if (this.inProgress) {\n      throw new Error(\"Retrier is already in progress\");\n    }\n\n    this.inProgress = true;\n    this.startTimestamp = Date.now();\n    this.scheduleAttempt(this.initialDelay);\n  }\n\n  public cancel(): void {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n      this.inProgress = false;\n\n      this.emit(\"cancelled\");\n    }\n  }\n\n  // @todo Must be a T here, so the entire Retrier must be typed on this value type.\n  // eslint-disable-next-line\n  public succeeded(arg?: any): void {\n    this.emit(\"succeeded\", arg);\n  }\n\n  public failed(err: Error, nextAttemptDelayOverride?: number): void {\n    if (this.timeout) {\n      throw new Error(\"Retrier attempt is already in progress\");\n    }\n\n    this.scheduleAttempt(nextAttemptDelayOverride);\n  }\n}\n\n/**\n * Run retrier as an async function with possibility to await for it.\n * Example:\n * ```\n * const result = AsyncRetrier.run(async () => somePromise);\n * ```\n */\nclass AsyncRetrier extends EventEmitter {\n  private retrier: Retrier;\n  // This any must be T typed directly on the AsyncRetrier\n  // eslint-disable-next-line\n  private resolve: (value: any) => void = () => void 0;\n  private reject: (err?: Error) => void = () => void 0;\n\n  constructor(options: {\n    min: number;\n    max: number;\n    initial?: number;\n    maxAttemptsCount?: number;\n    maxAttemptsTime?: number;\n    randomness?: number;\n  }) {\n    super();\n    this.retrier = new Retrier(options);\n  }\n\n  public run<T>(handler: () => Promise<T>): Promise<T> {\n    this.retrier.on(\"attempt\", () => {\n      handler()\n        .then((v) => this.retrier.succeeded(v))\n        .catch((e) => this.retrier.failed(e));\n    });\n\n    this.retrier.on(\"succeeded\", (arg) => this.resolve(arg));\n    this.retrier.on(\"cancelled\", () => this.reject(new Error(\"Cancelled\")));\n    this.retrier.on(\"failed\", (err) => this.reject(err));\n\n    return new Promise<T>((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n\n      this.retrier.start();\n    });\n  }\n\n  public cancel(): void {\n    this.retrier.cancel();\n  }\n}\n\nexport { Retrier, AsyncRetrier };\n","import { EventEmitter } from \"events\";\n\nfunction isDef(value: number | undefined | null): value is number {\n  return value !== undefined && value !== null;\n}\n\nexport interface BackoffOptions {\n  initialDelay?: number;\n  maxDelay?: number;\n  randomisationFactor?: number;\n  factor?: number;\n}\n\nclass Backoff extends EventEmitter {\n  private readonly maxDelay: number;\n  private readonly initialDelay: number;\n  private readonly factor: number;\n  private readonly randomisationFactor: number;\n  private backoffDelay = 0;\n  private nextBackoffDelay = 0;\n  private backoffNumber = 0;\n  private timeoutID: ReturnType<typeof setTimeout> | null = null;\n  private maxNumberOfRetry = -1;\n\n  constructor(options: BackoffOptions) {\n    super();\n    options = options || {};\n    const { initialDelay, maxDelay, randomisationFactor, factor } = options;\n\n    if (isDef(initialDelay) && initialDelay < 1) {\n      throw new Error(\n        \"The initial timeout must be equal to or greater than 1.\"\n      );\n    }\n    if (isDef(maxDelay) && maxDelay <= 1) {\n      throw new Error(\"The maximal timeout must be greater than 1.\");\n    }\n    if (\n      isDef(randomisationFactor) &&\n      (randomisationFactor < 0 || randomisationFactor > 1)\n    ) {\n      throw new Error(\"The randomisation factor must be between 0 and 1.\");\n    }\n    if (isDef(factor) && factor <= 1) {\n      throw new Error(`Exponential factor should be greater than 1.`);\n    }\n\n    this.initialDelay = initialDelay || 100;\n    this.maxDelay = maxDelay || 10000;\n    if (this.maxDelay <= this.initialDelay) {\n      throw new Error(\n        \"The maximal backoff delay must be greater than the initial backoff delay.\"\n      );\n    }\n    this.randomisationFactor = randomisationFactor || 0;\n    this.factor = factor || 2;\n    this.reset();\n  }\n\n  public static exponential(options: BackoffOptions): Backoff {\n    return new Backoff(options);\n  }\n\n  public backoff(err?: Error): void {\n    if (this.timeoutID == null) {\n      if (this.backoffNumber === this.maxNumberOfRetry) {\n        this.emit(\"fail\", err);\n        this.reset();\n      } else {\n        this.backoffDelay = this.next();\n        this.timeoutID = setTimeout(\n          this.onBackoff.bind(this),\n          this.backoffDelay\n        );\n        this.emit(\"backoff\", this.backoffNumber, this.backoffDelay, err);\n      }\n    }\n  }\n\n  public reset(): void {\n    this.backoffDelay = 0;\n    this.nextBackoffDelay = this.initialDelay;\n    this.backoffNumber = 0;\n    if (this.timeoutID) {\n      clearTimeout(this.timeoutID);\n    }\n    this.timeoutID = null;\n  }\n\n  public failAfter(maxNumberOfRetry: number): void {\n    if (maxNumberOfRetry <= 0) {\n      throw new Error(\n        `Expected a maximum number of retry greater than 0 but got ${maxNumberOfRetry}`\n      );\n    }\n\n    this.maxNumberOfRetry = maxNumberOfRetry;\n  }\n\n  next(): number {\n    this.backoffDelay = Math.min(this.nextBackoffDelay, this.maxDelay);\n    this.nextBackoffDelay = this.backoffDelay * this.factor;\n    const randomisationMultiple = 1 + Math.random() * this.randomisationFactor;\n    return Math.min(\n      this.maxDelay,\n      Math.round(this.backoffDelay * randomisationMultiple)\n    );\n  }\n\n  onBackoff(): void {\n    this.timeoutID = null;\n    this.emit(\"ready\", this.backoffNumber, this.backoffDelay);\n    this.backoffNumber++;\n  }\n}\n\nexport { Backoff };\nexport default Backoff;\n"],"names":[],"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"}
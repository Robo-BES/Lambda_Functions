/*
@license
Copyright (c) 2018, Twilio, Inc.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

var log$2 = require('loglevel');
var operationRetrier = require('@twilio/operation-retrier');
var declarativeTypeValidator = require('@twilio/declarative-type-validator');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var log__namespace = /*#__PURE__*/_interopNamespace(log$2);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function prepareLine(prefix, args) {
    return [`${new Date().toISOString()} MCS Client ${prefix}:`].concat(Array.from(args));
}
class Logger {
    constructor(prefix) {
        this.prefix = "";
        this.prefix =
            prefix !== null && prefix !== undefined && prefix.length > 0
                ? prefix + " "
                : "";
    }
    static scope(prefix) {
        return new Logger(prefix);
    }
    setLevel(level) {
        log__namespace.setLevel(level);
    }
    static setLevel(level) {
        log__namespace.setLevel(level);
    }
    /* eslint-disable @typescript-eslint/explicit-module-boundary-types */
    trace(...args) {
        log__namespace.trace.apply(null, prepareLine(this.prefix + "T", args));
    }
    debug(...args) {
        log__namespace.debug.apply(null, prepareLine(this.prefix + "D", args));
    }
    info(...args) {
        log__namespace.info.apply(null, prepareLine(this.prefix + "I", args));
    }
    warn(...args) {
        log__namespace.warn.apply(null, prepareLine(this.prefix + "W", args));
    }
    error(...args) {
        log__namespace.error.apply(null, prepareLine(this.prefix + "E", args));
    }
    static trace(...args) {
        log__namespace.trace.apply(null, prepareLine("T", args));
    }
    static debug(...args) {
        log__namespace.debug.apply(null, prepareLine("D", args));
    }
    static info(...args) {
        log__namespace.info.apply(null, prepareLine("I", args));
    }
    static warn(...args) {
        log__namespace.warn.apply(null, prepareLine("W", args));
    }
    static error(...args) {
        log__namespace.error.apply(null, prepareLine("E", args));
    }
}

const MINIMUM_RETRY_DELAY = 1000;
const MAXIMUM_RETRY_DELAY = 4000;
const MAXIMUM_ATTEMPTS_COUNT = 3;
const RETRY_WHEN_THROTTLED = true;
const regionalMcsHost = (region) => `https://mcs.${region !== null && region !== void 0 ? region : "us1"}.twilio.com`;
const isFullUrl = (url) => url.startsWith("http");
const fullUrl = (partUrl, region) => `${!isFullUrl(partUrl) ? regionalMcsHost(region) : ""}${partUrl}`;
class Configuration {
    constructor(token, baseUrl, baseSetUrl, options) {
        var _a, _b, _c, _d, _e, _f;
        const constructorOptions = (_b = (_a = options.MCS) !== null && _a !== void 0 ? _a : options) !== null && _b !== void 0 ? _b : {};
        this.region = (_d = (_c = constructorOptions.region) !== null && _c !== void 0 ? _c : options.region) !== null && _d !== void 0 ? _d : 'us1';
        this.mediaUrl = fullUrl(baseUrl, this.region);
        this.mediaSetUrl = baseSetUrl ? fullUrl(baseSetUrl) : `${this.mediaUrl}Set`;
        this.token = token;
        this.retryWhenThrottledOverride =
            (_e = constructorOptions.retryWhenThrottledOverride) !== null && _e !== void 0 ? _e : RETRY_WHEN_THROTTLED;
        this.backoffConfigOverride = (_f = constructorOptions.backoffConfigOverride) !== null && _f !== void 0 ? _f : Configuration.backoffConfigDefault;
    }
    static get backoffConfigDefault() {
        return {
            min: MINIMUM_RETRY_DELAY,
            max: MAXIMUM_RETRY_DELAY,
            maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT,
        };
    }
    static get retryWhenThrottledDefault() {
        return RETRY_WHEN_THROTTLED;
    }
    updateToken(token) {
        this.token = token;
    }
}

/**
 * @classdesc A Media represents a metadata information for the media upload
 * @property {String} sid - The server-assigned unique identifier for Media
 * @property {String} serviceSid - Service instance id which Media belongs/uploaded to
 * @property {Date} dateCreated - When the Media was created
 * @property {Date} dateUpdated - When the Media was updated
 * @property {Number} size - Size of media, bytes
 * @property {String} contentType - content type of media
 * @property {String} fileName - file name, if present, null otherwise
 * @property {MediaCategory} category - attachment category
 */
class Media {
    constructor(config, network, data) {
        this.config = config;
        this.network = network;
        this._update(data);
    }
    get sid() {
        return this.state.sid;
    }
    get serviceSid() {
        return this.state.serviceSid;
    }
    get dateCreated() {
        return this.state.dateCreated;
    }
    get dateUpdated() {
        return this.state.dateUpdated;
    }
    get contentType() {
        return this.state.contentType;
    }
    get size() {
        return this.state.size;
    }
    /** @deprecated Use filename instead */
    get fileName() {
        return this.state.filename;
    }
    get filename() {
        return this.state.filename;
    }
    get category() {
        return this.state.category;
    }
    /**
     * Returns direct content URL to uploaded binary. This URL will expire after some time.
     * This function gets a new URL every time, preventing it from expiring but putting additional load on backend.
     * See getCachedContentUrl() for a function that reduces the amount of network requests.
     *
     * It is reasonable to build your own refresh logic upon these two functions: as soon as URL returned
     * by getCachedContentUrl() returns 40x status you should call getContentUrl() to refresh it.
     *
     * @returns {Promise<string>}
     */
    async getContentUrl() {
        const response = await this.network.get(`${this.config.mediaUrl}/${this.sid}`);
        this._update(response.body);
        return Promise.resolve(this.state.contentDirectUrl);
    }
    /**
     * Returns direct content URL to uploaded binary. This URL will expire after some time.
     * This function does not support getting a new URL however. Once set it will remain the same.
     * Use getContentUrl() to query a new one.
     *
     * It is reasonable to build your own refresh logic upon these two functions: as soon as URL returned
     * by getCachedContentUrl() returns 40x status you should call getContentUrl() to refresh it.
     *
     * @returns {Promise<string>}
     */
    async getCachedContentUrl() {
        if (this.state.contentDirectUrl) {
            return Promise.resolve(this.state.contentDirectUrl);
        }
        return await this.getContentUrl();
    }
    _update(data) {
        var _a, _b, _c, _d;
        this.state = {
            sid: data.sid,
            serviceSid: data.service_sid,
            channelSid: data.channel_sid,
            messageSid: data.message_sid,
            dateCreated: data.date_created ? new Date(data.date_created) : null,
            dateUploadUpdated: data.date_upload_updated
                ? new Date(data.date_upload_updated)
                : null,
            dateUpdated: data.date_updated ? new Date(data.date_updated) : null,
            size: data.size,
            contentType: data.content_type,
            author: data.author,
            url: data.url,
            contentUrl: data.links.content,
            contentDirectUrl: (_a = data.links.content_direct_temporary) !== null && _a !== void 0 ? _a : null,
            filename: (_b = data.filename) !== null && _b !== void 0 ? _b : null,
            category: (_c = data.category) !== null && _c !== void 0 ? _c : "media",
            isMultipartUpstream: (_d = data.is_multipart_upstream) !== null && _d !== void 0 ? _d : false,
        };
    }
}

class TransportError extends Error {
    constructor(message, code, body, status, headers) {
        super(message);
        this.code = code;
        this.body = body;
        this.status = status;
        this.headers = headers;
    }
}

// eslint-disable-next-line
const XHR = global["XMLHttpRequest"] || {};
function parseResponseHeaders(headerString) {
    if (!headerString) {
        return {};
    }
    return headerString
        .split("\u000d\u000a")
        .map((el) => el.split("\u003a\u0020"))
        .filter((el) => el.length === 2 && el[1].length > 0)
        .reduce((prev, curr) => {
        prev[curr[0]] = curr[1];
        return prev;
    }, {});
}
function extractBody(xhr) {
    const contentType = xhr.getResponseHeader("Content-Type");
    if (!contentType ||
        contentType.indexOf("application/json") !== 0 ||
        xhr.responseText.length === 0) {
        return xhr.responseText;
    }
    try {
        return JSON.parse(xhr.responseText);
    }
    catch (e) {
        return xhr.responseText;
    }
}
/**
 * Provides generic network interface
 */
class Transport {
    static async request(method, url, headers, body) {
        return new Promise((resolve, reject) => {
            const xhr = new XHR();
            xhr.open(method, url, true);
            xhr.onreadystatechange = function onreadystatechange() {
                var _a;
                if (xhr.readyState !== 4) {
                    return;
                }
                const headers = parseResponseHeaders(xhr.getAllResponseHeaders());
                const body = extractBody(xhr);
                if (200 <= xhr.status && xhr.status < 300) {
                    resolve({ status: xhr.status, headers, body });
                }
                else {
                    const status = (_a = xhr.statusText) !== null && _a !== void 0 ? _a : "NONE";
                    let bodyRepresentation;
                    if (typeof body === "string") {
                        bodyRepresentation =
                            body && body.split("\n", 2).length === 1 ? body : "";
                    }
                    else {
                        bodyRepresentation = JSON.stringify(body);
                    }
                    const message = `${xhr.status}: [${status}] ${bodyRepresentation}`;
                    reject(new TransportError(message, xhr.status, body, status, headers));
                }
            };
            for (const headerName in headers) {
                xhr.setRequestHeader(headerName, headers[headerName]);
                if (headerName === "Content-Type" &&
                    headers[headerName] === "application/json") {
                    body = JSON.stringify(body);
                }
            }
            xhr.send(body);
        });
    }
    /**
     * Make a GET request by given URL
     */
    async get(url, headers) {
        return Transport.request("GET", url, headers);
    }
    /**
     * Make a POST request by given URL
     */
    async post(url, headers, body) {
        return Transport.request("POST", url, headers, body);
    }
}

const log$1 = Logger.scope("Network");
class Network {
    constructor(config, transport) {
        this.config = config;
        this.transport = transport;
    }
    backoffConfig() {
        return Object.assign(Configuration.backoffConfigDefault, this.config.backoffConfigOverride);
    }
    retryWhenThrottled() {
        var _a, _b;
        return ((_b = (_a = this.config.retryWhenThrottledOverride) !== null && _a !== void 0 ? _a : Configuration.retryWhenThrottledDefault) !== null && _b !== void 0 ? _b : false);
    }
    async executeWithRetry(request, retryWhenThrottled) {
        return new Promise((resolve, reject) => {
            const codesToRetryOn = [502, 503, 504];
            if (retryWhenThrottled) {
                codesToRetryOn.push(429);
            }
            const retrier = new operationRetrier.Retrier(this.backoffConfig());
            retrier.on("attempt", async () => {
                try {
                    const result = await request();
                    retrier.succeeded(result);
                }
                catch (err) {
                    if (codesToRetryOn.indexOf(err.status) > -1) {
                        retrier.failed(err);
                    }
                    else if (err.message === "Twilsock disconnected") {
                        // Ugly hack. We must make a proper exceptions for twilsock
                        retrier.failed(err);
                    }
                    else {
                        // Fatal error
                        retrier.removeAllListeners();
                        retrier.cancel();
                        reject(err);
                    }
                }
            });
            retrier.on("succeeded", (result) => {
                resolve(result);
            });
            retrier.on("cancelled", (err) => reject(err));
            retrier.on("failed", (err) => reject(err));
            retrier.start();
        });
    }
    async get(url) {
        const headers = { "X-Twilio-Token": this.config.token };
        log$1.trace("sending GET request to ", url, " headers ", headers);
        try {
            const response = await this.executeWithRetry(() => this.transport.get(url, headers), this.retryWhenThrottled());
            log$1.trace("response", response);
            return response;
        }
        catch (err) {
            log$1.debug(`get() error ${err}`);
            throw err;
        }
    }
    async post(url, category, media, contentType, filename) {
        const headers = {
            "X-Twilio-Token": this.config.token,
        };
        if ((typeof FormData === "undefined" || !(media instanceof FormData)) &&
            contentType) {
            Object.assign(headers, {
                "Content-Type": contentType,
            });
        }
        const fullUrl = new URL(url);
        if (category) {
            fullUrl.searchParams.append("Category", category);
        }
        if (filename) {
            fullUrl.searchParams.append("Filename", filename);
        }
        let response;
        log$1.trace(`sending POST request to ${url} with headers ${headers}`);
        try {
            response = await this.transport.post(fullUrl.href, headers, media);
        }
        catch (err) {
            // If global["XMLHttpRequest"] is undefined, it means that the code is
            // not being executed in the browser.
            if (global["XMLHttpRequest"] === undefined && media instanceof FormData) {
                throw new TypeError("Posting FormData supported only with browser engine's FormData");
            }
            log$1.debug(`post() error ${err}`);
            throw err;
        }
        log$1.trace("response", response);
        return response;
    }
}

var version = "0.5.1";

const log = Logger.scope("");
/**
 * @classdesc A Client provides an interface for Media Content Service
 */
exports['default'] = class Client {
    /**
     * Base URLs must be full URLs with host. If host is not provided it will be generated from a default configuration
     * template using options.region.
     *
     * @param {String} token - Access token
     * @param {String} baseUrl - Base URL for Media Content Service Media resource, i.e. /v1/Services/{serviceSid}/Media
     * @param {String} baseSetUrl - Base URL for Media Content Service MediaSet resource, i.e. /v1/Services/{serviceSid}/MediaSet
     * @param {Client#ClientOptions} [options] - Options to customize the Client
     */
    constructor(token, baseUrl, baseSetUrl, options = {}) {
        var _a, _b;
        this.options = options;
        this.options.logLevel = (_a = this.options.logLevel) !== null && _a !== void 0 ? _a : "silent";
        this.config = new Configuration(token, baseUrl, baseSetUrl, this.options);
        log.setLevel(this.options.logLevel);
        this.options.transport = (_b = this.options.transport) !== null && _b !== void 0 ? _b : new Transport();
        this.transport = this.options.transport;
        this.network = new Network(this.config, this.transport);
    }
    /**
     * These options can be passed to Client constructor
     * @typedef {Object} Client#ClientOptions
     * @property {String} [logLevel='silent'] - The level of logging to enable. Valid options
     *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']
     */
    /**
     * Update the token used for Client operations
     * @param {String} token - The JWT string of the new token
     * @returns {void}
     */
    updateToken(token) {
        log.info("updateToken");
        this.config.updateToken(token);
    }
    /**
     * Gets media from media service
     * @param {String} sid - Media's SID
     * @returns {Promise<Media>}
     */
    async get(sid) {
        const response = await this.network.get(`${this.config.mediaUrl}/${sid}`);
        return new Media(this.config, this.network, response.body);
    }
    /**
     * Posts raw content to media service
     * @param {String} contentType - content type of media
     * @param {String|Buffer|Blob} media - content to post
     * @param {MediaCategory|null} category - category for the media
     * @returns {Promise<Media>}
     */
    async post(contentType, media, category, filename) {
        const response = await this.network.post(this.config.mediaUrl, category !== null && category !== void 0 ? category : "media", media, contentType, filename);
        return new Media(this.config, this.network, response.body);
    }
    /**
     * Posts FormData to media service. Can be used only with browser engine's FormData.
     * In non-browser FormData case the method will do promise reject with
     * new TypeError("Posting FormData supported only with browser engine's FormData")
     * @param {FormData} formData - form data to post
     * @param {MediaCategory|null} category - category for the media
     * @returns {Promise<Media>}
     */
    async postFormData(formData, category) {
        const response = await this.network.post(this.config.mediaUrl, category !== null && category !== void 0 ? category : "media", formData);
        return new Media(this.config, this.network, response.body);
    }
    /**
     * Retrieve information about multiple media SIDs at the same time.
     * @param mediaSids Array of Media SIDs to get information from.
     */
    async mediaSetGet(mediaSids) {
        const query = {
            command: "get",
            list: mediaSids.map((sid) => ({ media_sid: sid })),
        };
        const response = (await this.network.post(`${this.config.mediaSetUrl}`, null, JSON.stringify(query), "application/json"));
        return response.map((item) => {
            if (item.code !== 200) {
                throw new Error(`Failed to obtain detailed information about Media items (failed SID ${item.media_record.sid})`);
            }
            return new Media(this.config, this.network, item.media_record);
        });
    }
};
exports['default'].version = version;
__decorate([
    declarativeTypeValidator.validateTypes(declarativeTypeValidator.nonEmptyString),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], exports['default'].prototype, "updateToken", null);
__decorate([
    declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], exports['default'].prototype, "get", null);
exports['default'] = __decorate([
    declarativeTypeValidator.validateConstructorTypes(declarativeTypeValidator.nonEmptyString, declarativeTypeValidator.nonEmptyString, [
        declarativeTypeValidator.nonEmptyString,
        declarativeTypeValidator.literal(null),
    ], [
        declarativeTypeValidator.pureObject,
        'undefined',
    ]),
    __metadata("design:paramtypes", [String, String, Object, Object])
], exports['default']);

exports.Client = exports['default'];
exports.McsClient = exports['default'];
exports.McsMedia = Media;
exports.Media = Media;
exports.default = exports['default'];
//# sourceMappingURL=react-native.js.map
